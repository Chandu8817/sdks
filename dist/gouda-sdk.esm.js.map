{"version":3,"file":"gouda-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils/PermitPost.ts","../src/contracts/factories/DutchLimitOrderReactor__factory.ts","../src/contracts/factories/OrderQuoter__factory.ts","../src/contracts/factories/PermitPost__factory.ts","../src/contracts/factories/Multicall2__factory.ts","../src/utils/multicall.ts","../src/utils/NonceManager.ts","../src/utils/OrderQuoter.ts","../src/utils/OrderValidator.ts","../src/utils/index.ts","../src/order/DutchLimitOrder.ts","../src/order/index.ts","../src/builder/OrderBuilder.ts","../src/builder/DutchLimitOrderBuilder.ts"],"sourcesContent":["export const PERMIT_POST_MAPPING: { readonly [key: number]: string } = {\n  1: '0x0000000000000000000000000000000000000000',\n  12341234: '0xFD6D23eE2b6b136E34572fc80cbCd33E9787705e',\n};\n\nexport const ORDER_QUOTER_MAPPING: { readonly [key: number]: string } = {\n  1: '0x0000000000000000000000000000000000000000',\n  12341234: '0x1D13fF25b10C9a6741DFdce229073bed652197c7',\n};\n\nexport enum OrderType {\n  DutchLimit = 'DutchLimit',\n}\n\ntype Reactors = {\n  [key in OrderType]: string;\n};\n\ntype ReactorMapping = { readonly [key: number]: Reactors };\ntype ReverseReactorMapping = {\n  [key: string]: { chainId: number; orderType: OrderType };\n};\n\nexport const REACTOR_ADDRESS_MAPPING: ReactorMapping = {\n  1: {\n    [OrderType.DutchLimit]: '0x0000000000000000000000000000000000000000',\n  },\n  12341234: {\n    [OrderType.DutchLimit]: '0x4DAf17c8142A483B2E2348f56ae0F2cFDAe22ceE',\n  },\n};\n\nexport const REVERSE_REACTOR_MAPPING: ReverseReactorMapping = Object.entries(\n  REACTOR_ADDRESS_MAPPING\n).reduce((acc: ReverseReactorMapping, [chainId, orderTypes]) => {\n  for (const [orderType, reactorAddress] of Object.entries(orderTypes)) {\n    // lowercase for consistency when parsing orders\n    acc[reactorAddress.toLowerCase()] = {\n      chainId: parseInt(chainId),\n      orderType: OrderType[orderType as keyof typeof OrderType],\n    };\n  }\n\n  return acc;\n}, {});\n","export class MissingConfiguration extends Error {\n  constructor(key: string, value: string) {\n    super(`Missing configuration for ${key}: ${value}`);\n    Object.setPrototypeOf(this, MissingConfiguration.prototype);\n  }\n}\n","import { BigNumber, ethers, TypedDataDomain, TypedDataField } from 'ethers';\n\nimport { MissingConfiguration } from '../errors';\nimport { PERMIT_POST_MAPPING } from '../constants';\n\nconst DOMAIN_NAME = 'PermitPost';\nconst DOMAIN_VERSION = '1';\n\nexport enum TokenType {\n  ERC20,\n  ERC721,\n  ERC1155,\n}\n\nexport enum SigType {\n  Unordered,\n  Ordered,\n}\n\ntype TokenDetails = {\n  readonly tokenType: TokenType;\n  readonly token: string;\n  readonly maxAmount: BigNumber;\n  readonly id: BigNumber;\n};\n\nexport type PermitInfo = {\n  readonly sigType: SigType;\n  readonly tokens: readonly TokenDetails[];\n  readonly spender: string;\n  readonly deadline: number;\n  readonly witness: string;\n  readonly nonce: BigNumber;\n};\n\nexport type PermitData = {\n  domain: TypedDataDomain;\n  types: Record<string, TypedDataField[]>;\n  values: PermitInfo;\n};\n\nexport class PermitPost {\n  private readonly permitPostAddress: string;\n\n  constructor(private readonly chainId: number, address?: string) {\n    if (address) {\n      this.permitPostAddress = address;\n    } else if (PERMIT_POST_MAPPING[chainId]) {\n      this.permitPostAddress = PERMIT_POST_MAPPING[chainId];\n    } else {\n      throw new MissingConfiguration('permitPost', chainId.toString());\n    }\n  }\n\n  getPermitData(info: PermitInfo): PermitData {\n    return {\n      domain: this.domain,\n      types: this.types,\n      values: info,\n    };\n  }\n\n  getPermitDigest(info: PermitInfo): string {\n    return ethers.utils._TypedDataEncoder.hash(this.domain, this.types, info);\n  }\n\n  get domain(): TypedDataDomain {\n    return {\n      name: DOMAIN_NAME,\n      version: DOMAIN_VERSION,\n      chainId: this.chainId,\n      verifyingContract: this.permitPostAddress,\n    };\n  }\n\n  get types(): Record<string, TypedDataField[]> {\n    return {\n      Permit: [\n        { name: 'sigType', type: 'uint8' },\n        { name: 'tokens', type: 'TokenDetails[]' },\n        { name: 'spender', type: 'address' },\n        { name: 'deadline', type: 'uint256' },\n        { name: 'witness', type: 'bytes32' },\n        { name: 'nonce', type: 'uint256' },\n      ],\n      TokenDetails: [\n        { name: 'tokenType', type: 'uint8' },\n        { name: 'token', type: 'address' },\n        { name: 'maxAmount', type: 'uint256' },\n        { name: 'id', type: 'uint256' },\n      ],\n    };\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../common\";\nimport type {\n  DutchLimitOrderReactor,\n  DutchLimitOrderReactorInterface,\n} from \"../DutchLimitOrderReactor\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_permitPost\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlineBeforeEndTime\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlinePassed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"EndTimeBeforeStart\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidReactor\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"OrderAlreadyFilled\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"OrderCancelled\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"orderHash\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"filler\",\n        type: \"address\",\n      },\n    ],\n    name: \"Fill\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"order\",\n            type: \"bytes\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n              },\n            ],\n            internalType: \"struct Signature\",\n            name: \"sig\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct SignedOrder\",\n        name: \"order\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"fillContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"fillData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"order\",\n            type: \"bytes\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n              },\n            ],\n            internalType: \"struct Signature\",\n            name: \"sig\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct SignedOrder[]\",\n        name: \"orders\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"fillContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"fillData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"executeBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"orderStatus\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"isCancelled\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isFilled\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"permitPost\",\n    outputs: [\n      {\n        internalType: \"contract IPermitPost\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"order\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"resolve\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"reactor\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct OrderInfo\",\n            name: \"info\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenAmount\",\n            name: \"input\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n              },\n            ],\n            internalType: \"struct Output[]\",\n            name: \"outputs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct ResolvedOrder\",\n        name: \"resolvedOrder\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"\";\n\ntype DutchLimitOrderReactorConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: DutchLimitOrderReactorConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class DutchLimitOrderReactor__factory extends ContractFactory {\n  constructor(...args: DutchLimitOrderReactorConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    _permitPost: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<DutchLimitOrderReactor> {\n    return super.deploy(\n      _permitPost,\n      overrides || {}\n    ) as Promise<DutchLimitOrderReactor>;\n  }\n  override getDeployTransaction(\n    _permitPost: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_permitPost, overrides || {});\n  }\n  override attach(address: string): DutchLimitOrderReactor {\n    return super.attach(address) as DutchLimitOrderReactor;\n  }\n  override connect(signer: Signer): DutchLimitOrderReactor__factory {\n    return super.connect(signer) as DutchLimitOrderReactor__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): DutchLimitOrderReactorInterface {\n    return new utils.Interface(_abi) as DutchLimitOrderReactorInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): DutchLimitOrderReactor {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as DutchLimitOrderReactor;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../common\";\nimport type { OrderQuoter, OrderQuoterInterface } from \"../OrderQuoter\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"order\",\n        type: \"bytes\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Signature\",\n        name: \"sig\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"quote\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"reactor\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct OrderInfo\",\n            name: \"info\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenAmount\",\n            name: \"input\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n              },\n            ],\n            internalType: \"struct Output[]\",\n            name: \"outputs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct ResolvedOrder\",\n        name: \"result\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"reactor\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct OrderInfo\",\n            name: \"info\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenAmount\",\n            name: \"input\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n              },\n            ],\n            internalType: \"struct Output[]\",\n            name: \"outputs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct ResolvedOrder[]\",\n        name: \"resolvedOrders\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"reactorCallback\",\n    outputs: [],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610955806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806389930d271461003b578063b030bac314610050575b600080fd5b61004e610049366004610426565b610079565b005b61006361005e366004610581565b6100bf565b604051610070919061060b565b60405180910390f35b60008260008151811061008e5761008e6106bd565b60200260200101516040516020016100a6919061060b565b6040516020818303038152906040529050805181602001fd5b6100c76101b7565b60408381015181518083018352858152602080820186905283519081018452600081529251638bcaadbd60e01b81526001600160a01b0390921692638bcaadbd9261011792913091600401610719565b600060405180830381600087803b15801561013157600080fd5b505af1925050508015610142575060015b610183573d808015610170576040519150601f19603f3d011682016040523d82523d6000602084013e610175565b606091505b5061017f81610189565b9150505b92915050565b6101916101b7565b60c0825110156101a357815182602001fd5b818060200190518101906101839190610859565b6040805160c0810182526000606082018181526080830182905260a08301829052825282518084019093528083526020838101919091529091908201908152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561023a5761023a610201565b60405290565b6040516060810167ffffffffffffffff8111828210171561023a5761023a610201565b604051601f8201601f1916810167ffffffffffffffff8111828210171561028c5761028c610201565b604052919050565b600067ffffffffffffffff8211156102ae576102ae610201565b5060051b60200190565b6001600160a01b03811681146102cd57600080fd5b50565b6000604082840312156102e257600080fd5b6102ea610217565b905081356102f7816102b8565b808252506020820135602082015292915050565b600082601f83011261031c57600080fd5b8135602061033161032c83610294565b610263565b8281526060928302850182019282820191908785111561035057600080fd5b8387015b858110156103a95781818a03121561036c5760008081fd5b610374610240565b813561037f816102b8565b81528186013586820152604080830135610398816102b8565b908201528452928401928101610354565b5090979650505050505050565b600082601f8301126103c757600080fd5b813567ffffffffffffffff8111156103e1576103e1610201565b6103f4601f8201601f1916602001610263565b81815284602083860101111561040957600080fd5b816020850160208301376000918101602001919091529392505050565b600080604080848603121561043a57600080fd5b833567ffffffffffffffff8082111561045257600080fd5b818601915086601f83011261046657600080fd5b8135602061047661032c83610294565b82815260059290921b8401810191818101908a84111561049557600080fd5b8286015b84811015610552578035868111156104b057600080fd5b8701808d03601f190160c08112156104c85760008081fd5b6104d0610240565b6060808312156104e05760008081fd5b6104e8610240565b9250878401356104f7816102b8565b8352838c0135888401528301358b8301528181526105188f608085016102d0565b8782015260c08301359150888211156105315760008081fd5b61053f8f888486010161030b565b818c015285525050918301918301610499565b509750508701359350508083111561056957600080fd5b5050610577858286016103b6565b9150509250929050565b600080828403608081121561059557600080fd5b833567ffffffffffffffff8111156105ac57600080fd5b6105b8868287016103b6565b9350506060601f19820112156105cd57600080fd5b506105d6610240565b602084013560ff811681146105ea57600080fd5b81526040848101356020830152606090940135938101939093525092909150565b6020808252825180516001600160a01b039081168484015281830151604080860191909152918201516060808601919091528584015180518316608087015284015160a08601528286015160c080870152805160e0870181905260009594918501938693909290916101008901905b808610156106af578651805186168352888101518984015283015185168383015295870195600195909501949083019061067a565b509998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156106f9576020818501810151868301820152016106dd565b506000602082860101526020601f19601f83011685010191505092915050565b60608152600084516080606084015261073560e08401826106d3565b9050602086015160ff8151166080850152602081015160a0850152604081015160c08501525060018060a01b0385166020840152828103604084015261077b81856106d3565b9695505050505050565b60006040828403121561079757600080fd5b61079f610217565b905081516107ac816102b8565b808252506020820151602082015292915050565b600082601f8301126107d157600080fd5b815160206107e161032c83610294565b8281526060928302850182019282820191908785111561080057600080fd5b8387015b858110156103a95781818a03121561081c5760008081fd5b610824610240565b815161082f816102b8565b81528186015186820152604080830151610848816102b8565b908201528452928401928101610804565b60006020828403121561086b57600080fd5b815167ffffffffffffffff8082111561088357600080fd5b9083019081850360c081121561089857600080fd5b6108a0610240565b60608212156108ae57600080fd5b6108b6610240565b915083516108c3816102b8565b8083525060208401516020830152604084015160408301528181526108eb8760608601610785565b602082015260a084015191508282111561090457600080fd5b610910878386016107c0565b6040820152969550505050505056fea2646970667358221220ff9e542de14d43a693a13064b7d6ddb028a4a1fa585b49b01c69e98897b6627b64736f6c63430008100033\";\n\ntype OrderQuoterConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: OrderQuoterConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class OrderQuoter__factory extends ContractFactory {\n  constructor(...args: OrderQuoterConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<OrderQuoter> {\n    return super.deploy(overrides || {}) as Promise<OrderQuoter>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): OrderQuoter {\n    return super.attach(address) as OrderQuoter;\n  }\n  override connect(signer: Signer): OrderQuoter__factory {\n    return super.connect(signer) as OrderQuoter__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): OrderQuoterInterface {\n    return new utils.Interface(_abi) as OrderQuoterInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): OrderQuoter {\n    return new Contract(address, _abi, signerOrProvider) as OrderQuoter;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../common\";\nimport type { PermitPost, PermitPostInterface } from \"../PermitPost\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlinePassed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidAmount\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidId\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidSignature\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NonceUsed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotSpender\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"_PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_TOKEN_DETAILS_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"bitmapPositions\",\n    outputs: [\n      {\n        internalType: \"uint248\",\n        name: \"wordPos\",\n        type: \"uint248\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"bitPos\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"invalidateNonces\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint248\",\n        name: \"wordPos\",\n        type: \"uint248\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"mask\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"invalidateUnorderedNonces\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"isUsedUnorderedNonce\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"used\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint248\",\n        name: \"\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"nonceBitmap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"enum TokenType\",\n                name: \"tokenType\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"maxAmount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenDetails[]\",\n            name: \"tokens\",\n            type: \"tuple[]\",\n          },\n          {\n            internalType: \"address\",\n            name: \"spender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"witness\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Permit\",\n        name: \"permit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"to\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"ids\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Signature\",\n        name: \"sig\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"enum TokenType\",\n                name: \"tokenType\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"maxAmount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenDetails[]\",\n            name: \"tokens\",\n            type: \"tuple[]\",\n          },\n          {\n            internalType: \"address\",\n            name: \"spender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"witness\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Permit\",\n        name: \"permit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"to\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"ids\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Signature\",\n        name: \"sig\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"unorderedTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x61014060405234801561001157600080fd5b50604080518082018252600a81526914195c9b5a5d141bdcdd60b21b6020808301918252835180850190945260018452603160f81b908401528151902060e08190527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100f18184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061010692505050565b60805160a05160c05160e05161010051610120516113ce6101556000396000610b9701526000610be601526000610bc101526000610b1a01526000610b4401526000610b6e01526113ce6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637ecebe00116100665780637ecebe00146101a7578063982aaf6b146101c7578063a44ba4ef146101ee578063b2a2ee671461022b578063ee3ab3261461023e57600080fd5b80631e459b98146100a357806322f888e7146100fa578063350a62b41461010f57806364eb31841461014a5780636a9009ae1461017f575b600080fd5b6100e56100b1366004610e61565b6001600160a01b0391909116600090815260208181526040808320600885901c845290915290205460ff9091161c60011690565b60405190151581526020015b60405180910390f35b61010d610108366004610e8b565b610251565b005b61010d61011d366004610ebb565b336000908152602081815260408083206001600160f81b0390951683529390529190912080549091179055565b6101717f15d73fd3389658d5d3b3e32a847b53c30a229bdcd21f7078cde26cc4d0d3f1cc81565b6040519081526020016100f1565b61017161018d366004610ed7565b600060208181529281526040808220909352908152205481565b6101716101b5366004610f0a565b60016020526000908152604090205481565b6101717f0eb37ebaa42bd9140c20b84947b8f4faa6c3bb28b233e2f3acd91fec0317fe2681565b61020a6101fc366004610e8b565b600881901c9160ff90911690565b604080516001600160f81b03909316835260ff9091166020830152016100f1565b61010d610239366004610fa2565b610278565b61010d61024c366004611083565b6103c3565b3360009081526001602052604081208054839290610270908490611163565b909155505050565b6102858984848888610518565b60006102bb8a8360016102b68d6001600160a01b031660009081526001602081905260409091208054918201905590565b61068a565b9050886001600160a01b0316816001600160a01b0316146102ef57604051638baa579f60e01b815260040160405180910390fd5b60005b6102fc8b80611176565b90508110156103b65760006103118c80611176565b83818110610321576103216111c0565b90506080020180360381019061033791906111ec565b90506103a5816000015182602001518d8d8d87818110610359576103596111c0565b905060200201602081019061036e9190610f0a565b8c8c88818110610380576103806111c0565b905060200201358b8b89818110610399576103996111c0565b90506020020135610855565b506103af81611272565b90506102f2565b5050505050505050505050565b6103d08985858989610518565b60006103df8a8360008661068a565b6001600160a01b038116600090815260208181526040808320600888901c845290915290205490915060ff84161c6001161561042e57604051631f6d5aef60e01b815260040160405180910390fd5b6001600160a01b038116600090815260208181526040808320600887901c845290915281208054600160ff87161b1790555b61046a8b80611176565b90508110156103b657600061047f8c80611176565b8381811061048f5761048f6111c0565b9050608002018036038101906104a591906111ec565b905061050781600001518260200151858e8e878181106104c7576104c76111c0565b90506020020160208101906104dc9190610f0a565b8d8d888181106104ee576104ee6111c0565b905060200201358c8c89818110610399576103996111c0565b5061051181611272565b9050610460565b6105286040860160208701610f0a565b6001600160a01b0316336001600160a01b0316146105595760405163e79dd39160e01b815260040160405180910390fd5b846040013542111561057e5760405163387b2e5560e11b815260040160405180910390fd5b60005b61058b8680611176565b90508110156106005761059e8680611176565b828181106105ae576105ae6111c0565b905060800201604001358585838181106105ca576105ca6111c0565b9050602002013511156105f05760405163162908e360e11b815260040160405180910390fd5b6105f981611272565b9050610581565b5060005b61060e8680611176565b9050811015610682576106218680611176565b82818110610631576106316111c0565b9050608002016060013583838381811061064d5761064d6111c0565b905060200201351461067257604051631bf4348160e31b815260040160405180910390fd5b61067b81611272565b9050610604565b505050505050565b6000806106978680611176565b905067ffffffffffffffff8111156106b1576106b16111d6565b6040519080825280602002602001820160405280156106da578160200160208202803683370190505b50905060005b6106ea8780611176565b90508110156107585761072b6107008880611176565b83818110610710576107106111c0565b90506080020180360381019061072691906111ec565b6109b0565b82828151811061073d5761073d6111c0565b602090810291909101015261075181611272565b90506106e0565b5060006107f67f0eb37ebaa42bd9140c20b84947b8f4faa6c3bb28b233e2f3acd91fec0317fe268684604051602001610791919061128b565b604051602081830303815290604052805190602001208a60200160208101906107ba9190610f0a565b8b604001358c606001358a6040516020016107db97969594939291906112d7565b60405160208183030381529060405280519060200120610a02565b9050600061081a8261080b60208a018a611327565b89602001358a60400135610a56565b90506001600160a01b03811661084357604051638baa579f60e01b815260040160405180910390fd5b925061084d915050565b949350505050565b6000866002811115610869576108696112c1565b03610888576108836001600160a01b038616858584610a7e565b610682565b600186600281111561089c5761089c6112c1565b03610910576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd90606401600060405180830381600087803b1580156108f357600080fd5b505af1158015610907573d6000803e3d6000fd5b50505050610682565b6002866002811115610924576109246112c1565b0361068257604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b15801561099057600080fd5b505af11580156109a4573d6000803e3d6000fd5b50505050505050505050565b60007f15d73fd3389658d5d3b3e32a847b53c30a229bdcd21f7078cde26cc4d0d3f1cc826040516020016109e592919061134a565b604051602081830303815290604052805190602001209050919050565b6000610a50610a0f610b0d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610a6787878787610c34565b91509150610a7481610cf8565b5095945050505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610b065760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064015b60405180910390fd5b5050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610b6657507f000000000000000000000000000000000000000000000000000000000000000046145b15610b9057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610c6b5750600090506003610cef565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610cbf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ce857600060019250925050610cef565b9150600090505b94509492505050565b6000816004811115610d0c57610d0c6112c1565b03610d145750565b6001816004811115610d2857610d286112c1565b03610d755760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610afd565b6002816004811115610d8957610d896112c1565b03610dd65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610afd565b6003816004811115610dea57610dea6112c1565b03610e425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610afd565b50565b80356001600160a01b0381168114610e5c57600080fd5b919050565b60008060408385031215610e7457600080fd5b610e7d83610e45565b946020939093013593505050565b600060208284031215610e9d57600080fd5b5035919050565b80356001600160f81b0381168114610e5c57600080fd5b60008060408385031215610ece57600080fd5b610e7d83610ea4565b60008060408385031215610eea57600080fd5b610ef383610e45565b9150610f0160208401610ea4565b90509250929050565b600060208284031215610f1c57600080fd5b610f2582610e45565b9392505050565b600060808284031215610f3e57600080fd5b50919050565b60008083601f840112610f5657600080fd5b50813567ffffffffffffffff811115610f6e57600080fd5b6020830191508360208260051b8501011115610f8957600080fd5b9250929050565b600060608284031215610f3e57600080fd5b60008060008060008060008060006101008a8c031215610fc157600080fd5b893567ffffffffffffffff80821115610fd957600080fd5b610fe58d838e01610f2c565b9a50610ff360208d01610e45565b995060408c013591508082111561100957600080fd5b6110158d838e01610f44565b909950975060608c013591508082111561102e57600080fd5b61103a8d838e01610f44565b909750955060808c013591508082111561105357600080fd5b506110608c828d01610f44565b909450925061107490508b60a08c01610f90565b90509295985092959850929598565b60008060008060008060008060006101008a8c0312156110a257600080fd5b893567ffffffffffffffff808211156110ba57600080fd5b6110c68d838e01610f2c565b9a5060208c01359150808211156110dc57600080fd5b6110e88d838e01610f44565b909a50985060408c013591508082111561110157600080fd5b61110d8d838e01610f44565b909850965060608c013591508082111561112657600080fd5b506111338c828d01610f44565b90955093505060808a013591506110748b60a08c01610f90565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a5057610a5061114d565b6000808335601e1984360301811261118d57600080fd5b83018035915067ffffffffffffffff8211156111a857600080fd5b6020019150600781901b3603821315610f8957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000608082840312156111fe57600080fd5b6040516080810181811067ffffffffffffffff8211171561122f57634e487b7160e01b600052604160045260246000fd5b60405282356003811061124157600080fd5b815261124f60208401610e45565b602082015260408301356040820152606083013560608201528091505092915050565b6000600182016112845761128461114d565b5060010190565b815160009082906020808601845b838110156112b557815185529382019390820190600101611299565b50929695505050505050565b634e487b7160e01b600052602160045260246000fd5b87815260e08101600288106112ee576112ee6112c1565b602082019790975260408101959095526001600160a01b03939093166060850152608084019190915260a083015260c090910152919050565b60006020828403121561133957600080fd5b813560ff81168114610f2557600080fd5b828152815160a082019060038110611364576113646112c1565b8060208401525060018060a01b0360208401511660408301526040830151606083015260608301516080830152939250505056fea2646970667358221220c73380fe553c2742f9f7a900d083ac8df57285b022c85d7973d649a06209920364736f6c63430008100033\";\n\ntype PermitPostConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: PermitPostConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class PermitPost__factory extends ContractFactory {\n  constructor(...args: PermitPostConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<PermitPost> {\n    return super.deploy(overrides || {}) as Promise<PermitPost>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): PermitPost {\n    return super.attach(address) as PermitPost;\n  }\n  override connect(signer: Signer): PermitPost__factory {\n    return super.connect(signer) as PermitPost__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): PermitPostInterface {\n    return new utils.Interface(_abi) as PermitPostInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PermitPost {\n    return new Contract(address, _abi, signerOrProvider) as PermitPost;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Multicall2, Multicall2Interface } from \"../Multicall2\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"aggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"returnData\",\n        type: \"bytes[]\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"blockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockCoinbase\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"coinbase\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockDifficulty\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"difficulty\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockGasLimit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"gaslimit\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getEthBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryBlockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class Multicall2__factory {\n  static readonly abi = _abi;\n  static createInterface(): Multicall2Interface {\n    return new utils.Interface(_abi) as Multicall2Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Multicall2 {\n    return new Contract(address, _abi, signerOrProvider) as Multicall2;\n  }\n}\n","// Uses deployless multicall to fetch responses and errors for multiple calls at once\n// https://github.com/Destiner/deployless-multicall\n\nimport { BaseProvider } from '@ethersproject/providers';\nimport { Interface } from '@ethersproject/abi';\nimport { hexConcat } from '@ethersproject/bytes';\nimport deploylessMulticall2Abi from '../../abis/deploylessMulticall2.json';\nimport multicall2Abi from '../../abis/multicall2.json';\nimport { Multicall2__factory } from '../contracts';\n\nconst MULTICALL_ADDRESS = '0x5ba1e12693dc8f9c48aad8770482f4739beed696';\nconst DEPLOYLESS_MULTICALL_BYTECODE =\n  '0x608060405234801561001057600080fd5b5060405161087538038061087583398181016040528101906100329190610666565b6000815167ffffffffffffffff81111561004f5761004e610358565b5b60405190808252806020026020018201604052801561008857816020015b6100756102da565b81526020019060019003908161006d5790505b50905060005b82518110156101d3576000808483815181106100ad576100ac6106c2565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168584815181106100e2576100e16106c2565b5b6020026020010151602001516040516100fb9190610738565b6000604051808303816000865af19150503d8060008114610138576040519150601f19603f3d011682016040523d82523d6000602084013e61013d565b606091505b509150915085156101895781610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017f906107d2565b60405180910390fd5b5b60405180604001604052808315158152602001828152508484815181106101b3576101b26106c2565b5b6020026020010181905250505080806101cb9061082b565b91505061008e565b50602081516040028260405103030160408160405103036001835111156102535760005b8351811015610251578060200260208501018160200260400183018261021f57855160200281525b6000831115610244576020808303510151602083510151038060208303510180835250505b50506001810190506101f7565b505b60005b8351811015610281578060200260208501018051516040602083510151035250600181019050610256565b5060005b83518110156102ae57806020026020850101604060208083510151035250600181019050610285565b506001835114156102cb5760208301604082018451602002815250505b60208152825160208201528181f35b6040518060400160405280600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b61031f8161030a565b811461032a57600080fd5b50565b60008151905061033c81610316565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61039082610347565b810181811067ffffffffffffffff821117156103af576103ae610358565b5b80604052505050565b60006103c26102f6565b90506103ce8282610387565b919050565b600067ffffffffffffffff8211156103ee576103ed610358565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104398261040e565b9050919050565b6104498161042e565b811461045457600080fd5b50565b60008151905061046681610440565b92915050565b600080fd5b600067ffffffffffffffff82111561048c5761048b610358565b5b61049582610347565b9050602081019050919050565b60005b838110156104c05780820151818401526020810190506104a5565b838111156104cf576000848401525b50505050565b60006104e86104e384610471565b6103b8565b9050828152602081018484840111156105045761050361046c565b5b61050f8482856104a2565b509392505050565b600082601f83011261052c5761052b610342565b5b815161053c8482602086016104d5565b91505092915050565b60006040828403121561055b5761055a610404565b5b61056560406103b8565b9050600061057584828501610457565b600083015250602082015167ffffffffffffffff81111561059957610598610409565b5b6105a584828501610517565b60208301525092915050565b60006105c46105bf846103d3565b6103b8565b905080838252602082019050602084028301858111156105e7576105e66103ff565b5b835b8181101561062e57805167ffffffffffffffff81111561060c5761060b610342565b5b8086016106198982610545565b855260208501945050506020810190506105e9565b5050509392505050565b600082601f83011261064d5761064c610342565b5b815161065d8482602086016105b1565b91505092915050565b6000806040838503121561067d5761067c610300565b5b600061068b8582860161032d565b925050602083015167ffffffffffffffff8111156106ac576106ab610305565b5b6106b885828601610638565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b6000610712826106f1565b61071c81856106fc565b935061072c8185602086016104a2565b80840191505092915050565b60006107448284610707565b915081905092915050565b600082825260208201905092915050565b7f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006107bc60218361074f565b91506107c782610760565b604082019050919050565b600060208201905081810360008301526107eb816107af565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061083682610821565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610869576108686107f2565b5b60018201905091905056fe';\n\nexport type MulticallParams<TFunctionParams> = {\n  address: string;\n  contractInterface: Interface;\n  functionName: string;\n  functionParams: TFunctionParams[];\n};\n\nexport type MulticallResult = {\n  success: boolean;\n  returnData: string;\n};\n\ntype Call = {\n  target: string;\n  callData: string;\n};\n\n// Perform multiple on-chain calls in a single http request\n// return all results including errors\n// Uses deployless method to function properly even on chains with no multicall contract deployed\nexport async function multicall<TFunctionParams extends any[] | undefined>(\n  provider: BaseProvider,\n  params: MulticallParams<TFunctionParams>\n): Promise<MulticallResult[]> {\n  const { address, contractInterface, functionName, functionParams } = params;\n\n  const fragment = contractInterface.getFunction(functionName);\n  const calls: Call[] = functionParams.map(functionParam => {\n    const callData = contractInterface.encodeFunctionData(\n      fragment,\n      functionParam\n    );\n\n    return {\n      target: address,\n      callData,\n    };\n  });\n\n  return getAggregatedCall(provider, calls);\n}\n\nasync function getAggregatedCall(\n  provider: BaseProvider,\n  calls: Call[]\n): Promise<MulticallResult[]> {\n  const code = await provider.getCode(MULTICALL_ADDRESS);\n  if (code.length > 2) {\n    const multicall = Multicall2__factory.connect(MULTICALL_ADDRESS, provider);\n    return await multicall.callStatic.tryAggregate(false, calls);\n  } else {\n    const deploylessInterface = new Interface(deploylessMulticall2Abi);\n    const args = deploylessInterface.encodeDeploy([false, calls]);\n    const data = hexConcat([DEPLOYLESS_MULTICALL_BYTECODE, args]);\n\n    const response = await provider.call({\n      data,\n    });\n    const multicallInterface = new Interface(multicall2Abi);\n    return multicallInterface.decodeFunctionResult('tryAggregate', response)\n      .returnData;\n  }\n}\n","import { BigNumber, ethers } from 'ethers';\nimport { BaseProvider } from '@ethersproject/providers';\n\nimport { PERMIT_POST_MAPPING } from '../constants';\nimport { PermitPost, PermitPost__factory } from '../contracts';\nimport { MissingConfiguration } from '../errors';\n\ninterface NonceData {\n  word: BigNumber;\n  bitmap: BigNumber;\n}\n\n/**\n * Helper to track PermitPost nonces for addresses\n */\nexport class NonceManager {\n  private permitPost: PermitPost;\n  private currentWord: Map<string, BigNumber>;\n  private currentBitmap: Map<string, BigNumber>;\n\n  constructor(\n    private provider: BaseProvider,\n    chainId: number,\n    permitPostAddress?: string\n  ) {\n    if (permitPostAddress) {\n      this.permitPost = PermitPost__factory.connect(\n        permitPostAddress,\n        provider\n      );\n    } else if (PERMIT_POST_MAPPING[chainId]) {\n      this.permitPost = PermitPost__factory.connect(\n        PERMIT_POST_MAPPING[chainId],\n        this.provider\n      );\n    } else {\n      throw new MissingConfiguration('orderQuoter', chainId.toString());\n    }\n\n    this.currentWord = new Map();\n    this.currentBitmap = new Map();\n  }\n\n  /**\n   * Finds the next unused nonce and returns it\n   * Marks the nonce as used so it won't be returned again from this instance\n   * NOTE: if any nonce usages are in-flight and created outside of this instance,\n   * this function will not know about them and will return duplicates\n   */\n  async useNonce(address: string): Promise<BigNumber> {\n    const { word, bitmap } = await this.getNextOpenWord(address);\n    const bitPos = getFirstUnsetBit(bitmap);\n\n    this.currentWord.set(address, word);\n    this.currentBitmap.set(address, setBit(bitmap, bitPos));\n\n    return buildNonce(word, bitPos);\n  }\n\n  async isUsed(address: string, nonce: BigNumber): Promise<boolean> {\n    const { word, bitPos } = splitNonce(nonce);\n    const bitmap = await this.permitPost.nonceBitmap(address, word);\n    return bitmap\n      .div(BigNumber.from(2).pow(bitPos))\n      .mod(2)\n      .eq(1);\n  }\n\n  // Returns the first word that contains empty bits\n  private async getNextOpenWord(address: string): Promise<NonceData> {\n    let currentWord: BigNumber =\n      this.currentWord.get(address) || BigNumber.from(0);\n    let bitmap =\n      this.currentBitmap.get(address) ||\n      (await this.permitPost.nonceBitmap(address, currentWord));\n\n    while (bitmap.eq(ethers.constants.MaxUint256)) {\n      currentWord = currentWord.add(1);\n      bitmap = await this.permitPost.nonceBitmap(address, currentWord);\n    }\n\n    return {\n      word: currentWord,\n      bitmap: bitmap,\n    };\n  }\n}\n\ninterface SplitNonce {\n  word: BigNumber;\n  bitPos: BigNumber;\n}\n\n// Splits a permitPost nonce into the word and bitPos\nexport function splitNonce(nonce: BigNumber): SplitNonce {\n  const word = nonce.div(256);\n  const bitPos = nonce.mod(256);\n  return { word, bitPos };\n}\n\n// Builds a permitPost nonce from the given word and bitPos\nexport function buildNonce(word: BigNumber, bitPos: number): BigNumber {\n  // word << 8\n  const shiftedWord = word.mul(256);\n  return shiftedWord.add(bitPos);\n}\n\n// Returns the position of the first unset bit\n// Returns -1 if all bits are set\nexport function getFirstUnsetBit(bitmap: BigNumber): number {\n  // Optimization if switch to library w/ bitwise operators:\n  // return ~bitmap + (bitmap + 1)\n  // instead we have to do a loop\n\n  for (let i = 0; i < 256; i++) {\n    if (\n      bitmap\n        .div(BigNumber.from(2).pow(i))\n        .mod(2)\n        .eq(0)\n    ) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n// Returns the given bignumber with the given bit set\n// Does nothing if the given bit is already set\nexport function setBit(bitmap: BigNumber, bitPos: number): BigNumber {\n  // Optimization if switch to library w/ bitwise operators:\n  // return bitmap & (1 << bitPos)\n\n  const mask: BigNumber = BigNumber.from(2).pow(bitPos);\n  if (\n    bitmap\n      .div(mask)\n      .mod(2)\n      .eq(1)\n  ) {\n    return bitmap;\n  }\n\n  return bitmap.add(mask);\n}\n\ninterface CancelParams {\n  word: BigNumber;\n  mask: BigNumber;\n}\n\n// Get parameters to cancel a nonce\nexport function getCancelSingleParams(nonceToCancel: BigNumber): CancelParams {\n  const { word, bitPos } = splitNonce(nonceToCancel);\n  const mask = BigNumber.from(2).pow(bitPos);\n  return { word, mask };\n}\n","import { SignatureLike, splitSignature } from '@ethersproject/bytes';\nimport { BaseProvider } from '@ethersproject/providers';\nimport { ethers } from 'ethers';\n\nimport { multicall, MulticallResult } from './multicall';\nimport { MissingConfiguration } from '../errors';\nimport { ORDER_QUOTER_MAPPING } from '../constants';\nimport {\n  OrderQuoter as OrderQuoterContract,\n  OrderQuoter__factory,\n  DutchLimitOrderReactor__factory,\n} from '../contracts';\nimport { IOrder, TokenAmount } from '../order';\nimport { NonceManager } from './NonceManager';\n\nexport enum OrderValidation {\n  Expired,\n  AlreadyFilled,\n  Cancelled,\n  InsufficientFunds,\n  InvalidSignature,\n  InvalidOrderFields,\n  UnknownError,\n  OK,\n}\n\nexport interface ResolvedOrder {\n  input: TokenAmount;\n  outputs: TokenAmount[];\n}\n\nexport interface OrderQuote {\n  validation: OrderValidation;\n  // not specified if validation is not OK\n  quote: ResolvedOrder | undefined;\n}\n\nconst BASIC_ERROR = '0x08c379a0';\n\nconst KNOWN_ERRORS: { [key: string]: OrderValidation } = {\n  '8baa579f': OrderValidation.InvalidSignature,\n  '1f6d5aef': OrderValidation.Cancelled,\n  // invalid dutch decay time\n  '302e5b7c': OrderValidation.InvalidOrderFields,\n  // invalid dutch decay time\n  '773a6187': OrderValidation.InvalidOrderFields,\n  // invalid reactor address\n  '4ddf4a64': OrderValidation.InvalidOrderFields,\n  '70f65caa': OrderValidation.Expired,\n  ee3b3d4b: OrderValidation.AlreadyFilled,\n  TRANSFER_FROM_FAILED: OrderValidation.InsufficientFunds,\n};\n\nexport interface SignedOrder {\n  order: IOrder;\n  signature: SignatureLike;\n}\n\n/**\n * Order quoter\n */\nexport class OrderQuoter {\n  private orderQuoter: OrderQuoterContract;\n\n  constructor(\n    private provider: BaseProvider,\n    private chainId: number,\n    orderQuoterAddress?: string\n  ) {\n    if (orderQuoterAddress) {\n      this.orderQuoter = OrderQuoter__factory.connect(\n        orderQuoterAddress,\n        provider\n      );\n    } else if (ORDER_QUOTER_MAPPING[chainId]) {\n      this.orderQuoter = OrderQuoter__factory.connect(\n        ORDER_QUOTER_MAPPING[chainId],\n        this.provider\n      );\n    } else {\n      throw new MissingConfiguration('orderQuoter', chainId.toString());\n    }\n  }\n\n  async quote(order: SignedOrder): Promise<OrderQuote> {\n    return (await this.quoteBatch([order]))[0];\n  }\n\n  async quoteBatch(orders: SignedOrder[]): Promise<OrderQuote[]> {\n    const calls = orders.map(order => {\n      const { v, r, s } = splitSignature(order.signature);\n      return [order.order.serialize(), { v, r, s }];\n    });\n\n    const results = await multicall(this.provider, {\n      address: this.orderQuoter.address,\n      contractInterface: this.orderQuoter.interface,\n      functionName: 'quote',\n      functionParams: calls,\n    });\n\n    const validations = await this.getValidations(orders, results);\n    const quotes: (ResolvedOrder | undefined)[] = results.map(\n      ({ success, returnData }) => {\n        if (!success) {\n          return undefined;\n        }\n\n        return this.orderQuoter.interface.decodeFunctionResult(\n          'quote',\n          returnData\n        ).result;\n      }\n    );\n\n    return validations.map((validation, i) => {\n      return {\n        validation,\n        quote: quotes[i],\n      };\n    });\n  }\n\n  private async getValidations(\n    orders: SignedOrder[],\n    results: MulticallResult[]\n  ): Promise<OrderValidation[]> {\n    const validations = results.map(result => {\n      if (result.success) {\n        return OrderValidation.OK;\n      } else {\n        let returnData = result.returnData;\n\n        // Parse traditional string error messages\n        if (returnData.startsWith(BASIC_ERROR)) {\n          returnData = new ethers.utils.AbiCoder().decode(\n            ['string'],\n            '0x' + returnData.slice(10)\n          )[0];\n        }\n\n        for (const key of Object.keys(KNOWN_ERRORS)) {\n          if (returnData.includes(key)) {\n            return KNOWN_ERRORS[key];\n          }\n        }\n      }\n\n      return OrderValidation.UnknownError;\n    });\n\n    return await this.checkTerminalStates(orders, validations);\n  }\n\n  // The quoter contract has a quirk that make validations inaccurate:\n  // - checks expiry before anything else, so old but already filled orders will return as canceled\n  // so this function takes orders in expired and already filled states and double checks them\n  private async checkTerminalStates(\n    orders: SignedOrder[],\n    validations: OrderValidation[]\n  ): Promise<OrderValidation[]> {\n    return await Promise.all(\n      validations.map(async (validation, i) => {\n        const order = orders[i];\n        if (validation === OrderValidation.Expired) {\n          // all reactors have the same orderStatus interface, we just use limitorder to implement the interface\n          const reactor = DutchLimitOrderReactor__factory.connect(\n            order.order.info.reactor,\n            this.provider\n          );\n          const orderStatus = await reactor.orderStatus(order.order.hash());\n          if (orderStatus.isFilled) {\n            return OrderValidation.AlreadyFilled;\n          } else {\n            const nonceManager = new NonceManager(\n              this.provider,\n              this.chainId,\n              await reactor.permitPost()\n            );\n            const maker = order.order.getSigner(order.signature);\n            const cancelled = await nonceManager.isUsed(\n              maker,\n              order.order.info.nonce\n            );\n            return cancelled ? OrderValidation.Cancelled : validation;\n          }\n        } else {\n          return validation;\n        }\n      })\n    );\n  }\n}\n","import { OrderQuoter, OrderValidation, SignedOrder } from './OrderQuoter';\n\n/**\n * Order validator\n */\nexport class OrderValidator extends OrderQuoter {\n  async validate(order: SignedOrder): Promise<OrderValidation> {\n    return (await super.quote(order)).validation;\n  }\n\n  async validateBatch(orders: SignedOrder[]): Promise<OrderValidation[]> {\n    return (await super.quoteBatch(orders)).map(order => order.validation);\n  }\n}\n","export * from './PermitPost';\nexport * from './OrderValidator';\nexport * from './NonceManager';\nexport * from './OrderQuoter';\n\nexport function stripHexPrefix(a: string): string {\n  if (a.startsWith('0x')) {\n    return a.slice(2);\n  } else {\n    return a;\n  }\n}\n","import { SignatureLike } from '@ethersproject/bytes';\nimport { BigNumber, ethers } from 'ethers';\n\nimport { PermitPost, PermitData, SigType, TokenType } from '../utils';\n\nimport { IOrder, OrderInfo, TokenAmount } from './types';\n\nexport type DutchOutput = {\n  readonly token: string;\n  readonly startAmount: BigNumber;\n  readonly endAmount: BigNumber;\n  readonly recipient: string;\n};\n\nexport type DutchLimitOrderInfo = OrderInfo & {\n  startTime: number;\n  endTime: number;\n  input: TokenAmount;\n  outputs: DutchOutput[];\n};\n\nconst DUTCH_LIMIT_ORDER_ABI = [\n  'tuple(' +\n    [\n      'tuple(address,uint256,uint256)',\n      'uint256',\n      'uint256',\n      'tuple(address,uint256)',\n      'tuple(address,uint256,uint256,address)[]',\n    ].join(',') +\n    ')',\n];\n\nexport class DutchLimitOrder implements IOrder {\n  public readonly permitPost: PermitPost;\n\n  constructor(\n    public readonly info: DutchLimitOrderInfo,\n    public readonly chainId: number,\n    public readonly permitPostAddress?: string\n  ) {\n    this.permitPost = new PermitPost(chainId, permitPostAddress);\n  }\n\n  static parse(encoded: string, chainId: number): DutchLimitOrder {\n    const abiCoder = new ethers.utils.AbiCoder();\n    const decoded = abiCoder.decode(DUTCH_LIMIT_ORDER_ABI, encoded);\n    const [\n      [\n        [reactor, nonce, deadline],\n        startTime,\n        endTime,\n        [inputToken, inputAmount],\n        outputs,\n      ],\n    ] = decoded;\n    return new DutchLimitOrder(\n      {\n        reactor,\n        nonce,\n        deadline: deadline.toNumber(),\n        startTime: startTime.toNumber(),\n        endTime: endTime.toNumber(),\n        input: { token: inputToken, amount: inputAmount },\n        outputs: outputs.map(\n          ([token, startAmount, endAmount, recipient]: [\n            string,\n            number,\n            number,\n            string\n          ]) => {\n            return {\n              token,\n              startAmount,\n              endAmount,\n              recipient,\n            };\n          }\n        ),\n      },\n      chainId\n    );\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  serialize(): string {\n    const abiCoder = new ethers.utils.AbiCoder();\n    return abiCoder.encode(DUTCH_LIMIT_ORDER_ABI, [\n      [\n        [this.info.reactor, this.info.nonce, this.info.deadline],\n        this.info.startTime,\n        this.info.endTime,\n        [this.info.input.token, this.info.input.amount],\n        this.info.outputs.map(output => [\n          output.token,\n          output.startAmount,\n          output.endAmount,\n          output.recipient,\n        ]),\n      ],\n    ]);\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  getSigner(signature: SignatureLike): string {\n    return ethers.utils.computeAddress(\n      ethers.utils.recoverPublicKey(\n        this.permitPost.getPermitDigest(this.permitData().values),\n        signature\n      )\n    );\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  permitData(): PermitData {\n    return this.permitPost.getPermitData({\n      sigType: SigType.Unordered,\n      tokens: [\n        {\n          tokenType: TokenType.ERC20,\n          token: this.info.input.token,\n          maxAmount: this.info.input.amount,\n          id: BigNumber.from(0),\n        },\n      ],\n      spender: this.info.reactor,\n      deadline: this.info.deadline,\n      witness: this.hash(),\n      nonce: this.info.nonce,\n    });\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  hash(): string {\n    return ethers.utils.keccak256(this.serialize());\n  }\n}\n","import { OrderType, REVERSE_REACTOR_MAPPING } from '../constants';\nimport { stripHexPrefix } from '../utils';\n\nimport { IOrder } from './types';\nimport { DutchLimitOrder } from './DutchLimitOrder';\nimport { MissingConfiguration } from '../errors';\n\nexport * from './DutchLimitOrder';\nexport * from './types';\n\n/**\n * Parses a given serialized order\n * @return Parsed order object\n */\nexport function parseOrder(order: string): IOrder {\n  // reactor address is always the first field in order\n  const reactor =\n    '0x' +\n    stripHexPrefix(order)\n      .slice(0, 40)\n      .toLowerCase();\n\n  if (!REVERSE_REACTOR_MAPPING[reactor]) {\n    throw new MissingConfiguration('reactor', reactor);\n  }\n\n  const { chainId, orderType } = REVERSE_REACTOR_MAPPING[reactor];\n  switch (orderType) {\n    case OrderType.DutchLimit:\n      return DutchLimitOrder.parse(order, chainId);\n    default:\n      throw new MissingConfiguration('orderType', orderType);\n  }\n}\n","import invariant from 'tiny-invariant';\nimport { BigNumber } from 'ethers';\n\nimport { IOrder, OrderInfo } from '../order';\n\n/**\n * Builder for generating orders\n */\nexport abstract class OrderBuilder {\n  protected orderInfo: Partial<OrderInfo>;\n\n  constructor() {\n    this.orderInfo = {};\n  }\n\n  deadline(deadline: number): OrderBuilder {\n    invariant(\n      deadline > new Date().getTime() / 1000,\n      `Deadline must be in the future: ${deadline}`\n    );\n    this.orderInfo.deadline = deadline;\n    return this;\n  }\n\n  nonce(nonce: BigNumber): OrderBuilder {\n    this.orderInfo.nonce = nonce;\n    return this;\n  }\n\n  protected reactor(reactor: string): OrderBuilder {\n    this.orderInfo.reactor = reactor;\n    return this;\n  }\n\n  protected getOrderInfo(): OrderInfo {\n    invariant(this.orderInfo.reactor !== undefined, 'reactor not set');\n    invariant(this.orderInfo.nonce !== undefined, 'nonce not set');\n    invariant(this.orderInfo.deadline !== undefined, 'deadline not set');\n    return {\n      reactor: this.orderInfo.reactor,\n      nonce: this.orderInfo.nonce,\n      deadline: this.orderInfo.deadline,\n    };\n  }\n\n  abstract build(): IOrder;\n}\n","import { BigNumber } from 'ethers';\nimport invariant from 'tiny-invariant';\n\nimport { MissingConfiguration } from '../errors';\nimport { OrderType, REACTOR_ADDRESS_MAPPING } from '../constants';\n\nimport {\n  DutchLimitOrderInfo,\n  DutchOutput,\n  TokenAmount,\n  DutchLimitOrder,\n} from '../order';\nimport { OrderBuilder } from './OrderBuilder';\n\n/**\n * Helper builder for generating dutch limit orders\n */\nexport class DutchLimitOrderBuilder extends OrderBuilder {\n  private info: Partial<DutchLimitOrderInfo>;\n\n  constructor(\n    private chainId: number,\n    reactorAddress?: string,\n    private permitPostAddress?: string\n  ) {\n    super();\n\n    if (reactorAddress) {\n      this.reactor(reactorAddress);\n    } else if (\n      REACTOR_ADDRESS_MAPPING[chainId] &&\n      REACTOR_ADDRESS_MAPPING[chainId][OrderType.DutchLimit]\n    ) {\n      const reactorAddress =\n        REACTOR_ADDRESS_MAPPING[chainId][OrderType.DutchLimit];\n      this.reactor(reactorAddress);\n    } else {\n      throw new MissingConfiguration('reactor', chainId.toString());\n    }\n\n    this.info = {\n      outputs: [],\n    };\n  }\n\n  startTime(startTime: number): DutchLimitOrderBuilder {\n    invariant(\n      !this.info.endTime || startTime <= this.info.endTime,\n      `startTime must be before endTime: ${startTime}`\n    );\n\n    invariant(\n      !this.orderInfo.deadline || startTime <= this.orderInfo.deadline,\n      `startTime must be before deadline: ${startTime}`\n    );\n    this.info.startTime = startTime;\n    return this;\n  }\n\n  endTime(endTime: number): DutchLimitOrderBuilder {\n    invariant(\n      !this.info.startTime || endTime >= this.info.startTime,\n      `endTime must be after startTime: ${endTime}`\n    );\n    invariant(\n      !this.orderInfo.deadline || endTime <= this.orderInfo.deadline,\n      `endTime must be before deadline: ${endTime}`\n    );\n    this.info.endTime = endTime;\n    return this;\n  }\n\n  input(input: TokenAmount): DutchLimitOrderBuilder {\n    this.info.input = input;\n    return this;\n  }\n\n  output(output: DutchOutput): DutchLimitOrderBuilder {\n    if (!this.info.outputs) {\n      this.info.outputs = [];\n    }\n    this.info.outputs.push(output);\n    return this;\n  }\n\n  deadline(deadline: number): DutchLimitOrderBuilder {\n    super.deadline(deadline);\n    return this;\n  }\n\n  nonce(nonce: BigNumber): DutchLimitOrderBuilder {\n    super.nonce(nonce);\n    return this;\n  }\n\n  build(): DutchLimitOrder {\n    invariant(this.info.startTime !== undefined, 'startTime not set');\n    invariant(this.info.endTime !== undefined, 'endTime not set');\n    invariant(this.info.input !== undefined, 'input not set');\n    invariant(\n      this.info.outputs !== undefined && this.info.outputs.length !== 0,\n      'outputs not set'\n    );\n\n    return new DutchLimitOrder(\n      Object.assign(this.getOrderInfo(), {\n        startTime: this.info.startTime,\n        endTime: this.info.endTime,\n        input: this.info.input,\n        outputs: this.info.outputs,\n      }),\n      this.chainId,\n      this.permitPostAddress\n    );\n  }\n}\n"],"names":["PERMIT_POST_MAPPING","ORDER_QUOTER_MAPPING","OrderType","REACTOR_ADDRESS_MAPPING","DutchLimit","REVERSE_REACTOR_MAPPING","Object","entries","reduce","acc","chainId","orderTypes","orderType","reactorAddress","toLowerCase","parseInt","MissingConfiguration","key","value","setPrototypeOf","prototype","Error","DOMAIN_NAME","DOMAIN_VERSION","TokenType","SigType","PermitPost","address","permitPostAddress","toString","getPermitData","info","domain","types","values","getPermitDigest","ethers","utils","_TypedDataEncoder","hash","name","version","verifyingContract","Permit","type","TokenDetails","_abi","inputs","internalType","stateMutability","anonymous","indexed","components","outputs","_bytecode","isSuperArgs","xs","length","DutchLimitOrderReactor__factory","args","deploy","_permitPost","overrides","getDeployTransaction","attach","connect","signer","createInterface","Interface","signerOrProvider","Contract","ContractFactory","bytecode","abi","OrderQuoter__factory","PermitPost__factory","payable","Multicall2__factory","MULTICALL_ADDRESS","DEPLOYLESS_MULTICALL_BYTECODE","multicall","provider","params","contractInterface","functionName","functionParams","fragment","getFunction","calls","map","functionParam","callData","encodeFunctionData","target","getAggregatedCall","getCode","code","callStatic","tryAggregate","deploylessInterface","deploylessMulticall2Abi","encodeDeploy","data","hexConcat","call","response","multicallInterface","multicall2Abi","decodeFunctionResult","returnData","NonceManager","permitPost","currentWord","currentBitmap","Map","useNonce","getNextOpenWord","word","bitmap","bitPos","getFirstUnsetBit","set","setBit","buildNonce","isUsed","nonce","splitNonce","nonceBitmap","div","BigNumber","from","pow","mod","eq","get","constants","MaxUint256","add","shiftedWord","mul","i","mask","getCancelSingleParams","nonceToCancel","OrderValidation","BASIC_ERROR","KNOWN_ERRORS","InvalidSignature","Cancelled","InvalidOrderFields","Expired","ee3b3d4b","AlreadyFilled","TRANSFER_FROM_FAILED","InsufficientFunds","OrderQuoter","orderQuoterAddress","orderQuoter","quote","order","quoteBatch","orders","splitSignature","signature","v","r","s","serialize","results","getValidations","validations","quotes","success","undefined","result","validation","OK","startsWith","AbiCoder","decode","slice","keys","includes","UnknownError","checkTerminalStates","Promise","all","reactor","orderStatus","isFilled","nonceManager","maker","getSigner","cancelled","OrderValidator","validate","validateBatch","stripHexPrefix","a","DUTCH_LIMIT_ORDER_ABI","join","DutchLimitOrder","parse","encoded","abiCoder","decoded","deadline","startTime","endTime","inputToken","inputAmount","toNumber","input","token","amount","startAmount","endAmount","recipient","encode","output","computeAddress","recoverPublicKey","permitData","sigType","Unordered","tokens","tokenType","ERC20","maxAmount","id","spender","witness","keccak256","parseOrder","OrderBuilder","orderInfo","Date","getTime","invariant","getOrderInfo","DutchLimitOrderBuilder","push","build","assign"],"mappings":"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"}