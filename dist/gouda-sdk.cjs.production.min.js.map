{"version":3,"file":"gouda-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/PermitPost.ts","../src/errors.ts","../src/contracts/factories/DutchLimitOrderReactor__factory.ts","../src/contracts/factories/OrderQuoter__factory.ts","../src/contracts/factories/PermitPost__factory.ts","../src/contracts/factories/Multicall2__factory.ts","../src/utils/multicall.ts","../src/utils/NonceManager.ts","../src/utils/OrderQuoter.ts","../src/utils/OrderValidator.ts","../src/utils/index.ts","../src/order/DutchLimitOrder.ts","../src/builder/OrderBuilder.ts","../src/builder/DutchLimitOrderBuilder.ts","../src/order/index.ts"],"sourcesContent":["export const PERMIT_POST_MAPPING: { readonly [key: number]: string } = {\n  1: '0x0000000000000000000000000000000000000000',\n  12341234: '0xFD6D23eE2b6b136E34572fc80cbCd33E9787705e',\n};\n\nexport const ORDER_QUOTER_MAPPING: { readonly [key: number]: string } = {\n  1: '0x0000000000000000000000000000000000000000',\n  12341234: '0x1D13fF25b10C9a6741DFdce229073bed652197c7',\n};\n\nexport enum OrderType {\n  DutchLimit = 'DutchLimit',\n}\n\ntype Reactors = {\n  [key in OrderType]: string;\n};\n\ntype ReactorMapping = { readonly [key: number]: Reactors };\ntype ReverseReactorMapping = {\n  [key: string]: { chainId: number; orderType: OrderType };\n};\n\nexport const REACTOR_ADDRESS_MAPPING: ReactorMapping = {\n  1: {\n    [OrderType.DutchLimit]: '0x0000000000000000000000000000000000000000',\n  },\n  12341234: {\n    [OrderType.DutchLimit]: '0x4DAf17c8142A483B2E2348f56ae0F2cFDAe22ceE',\n  },\n};\n\nexport const REVERSE_REACTOR_MAPPING: ReverseReactorMapping = Object.entries(\n  REACTOR_ADDRESS_MAPPING\n).reduce((acc: ReverseReactorMapping, [chainId, orderTypes]) => {\n  for (const [orderType, reactorAddress] of Object.entries(orderTypes)) {\n    // lowercase for consistency when parsing orders\n    acc[reactorAddress.toLowerCase()] = {\n      chainId: parseInt(chainId),\n      orderType: OrderType[orderType as keyof typeof OrderType],\n    };\n  }\n\n  return acc;\n}, {});\n","import { BigNumber, ethers, TypedDataDomain, TypedDataField } from 'ethers';\n\nimport { MissingConfiguration } from '../errors';\nimport { PERMIT_POST_MAPPING } from '../constants';\n\nconst DOMAIN_NAME = 'PermitPost';\nconst DOMAIN_VERSION = '1';\n\nexport enum TokenType {\n  ERC20,\n  ERC721,\n  ERC1155,\n}\n\nexport enum SigType {\n  Unordered,\n  Ordered,\n}\n\ntype TokenDetails = {\n  readonly tokenType: TokenType;\n  readonly token: string;\n  readonly maxAmount: BigNumber;\n  readonly id: BigNumber;\n};\n\nexport type PermitInfo = {\n  readonly sigType: SigType;\n  readonly tokens: readonly TokenDetails[];\n  readonly spender: string;\n  readonly deadline: number;\n  readonly witness: string;\n  readonly nonce: BigNumber;\n};\n\nexport type PermitData = {\n  domain: TypedDataDomain;\n  types: Record<string, TypedDataField[]>;\n  values: PermitInfo;\n};\n\nexport class PermitPost {\n  private readonly permitPostAddress: string;\n\n  constructor(private readonly chainId: number, address?: string) {\n    if (address) {\n      this.permitPostAddress = address;\n    } else if (PERMIT_POST_MAPPING[chainId]) {\n      this.permitPostAddress = PERMIT_POST_MAPPING[chainId];\n    } else {\n      throw new MissingConfiguration('permitPost', chainId.toString());\n    }\n  }\n\n  getPermitData(info: PermitInfo): PermitData {\n    return {\n      domain: this.domain,\n      types: this.types,\n      values: info,\n    };\n  }\n\n  getPermitDigest(info: PermitInfo): string {\n    return ethers.utils._TypedDataEncoder.hash(this.domain, this.types, info);\n  }\n\n  get domain(): TypedDataDomain {\n    return {\n      name: DOMAIN_NAME,\n      version: DOMAIN_VERSION,\n      chainId: this.chainId,\n      verifyingContract: this.permitPostAddress,\n    };\n  }\n\n  get types(): Record<string, TypedDataField[]> {\n    return {\n      Permit: [\n        { name: 'sigType', type: 'uint8' },\n        { name: 'tokens', type: 'TokenDetails[]' },\n        { name: 'spender', type: 'address' },\n        { name: 'deadline', type: 'uint256' },\n        { name: 'witness', type: 'bytes32' },\n        { name: 'nonce', type: 'uint256' },\n      ],\n      TokenDetails: [\n        { name: 'tokenType', type: 'uint8' },\n        { name: 'token', type: 'address' },\n        { name: 'maxAmount', type: 'uint256' },\n        { name: 'id', type: 'uint256' },\n      ],\n    };\n  }\n}\n","export class MissingConfiguration extends Error {\n  constructor(key: string, value: string) {\n    super(`Missing configuration for ${key}: ${value}`);\n    Object.setPrototypeOf(this, MissingConfiguration.prototype);\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../common\";\nimport type {\n  DutchLimitOrderReactor,\n  DutchLimitOrderReactorInterface,\n} from \"../DutchLimitOrderReactor\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_permitPost\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlineBeforeEndTime\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlinePassed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"EndTimeBeforeStart\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidReactor\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"OrderAlreadyFilled\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"OrderCancelled\",\n    type: \"error\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        internalType: \"bytes32\",\n        name: \"orderHash\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"filler\",\n        type: \"address\",\n      },\n    ],\n    name: \"Fill\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"order\",\n            type: \"bytes\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n              },\n            ],\n            internalType: \"struct Signature\",\n            name: \"sig\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct SignedOrder\",\n        name: \"order\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"fillContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"fillData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"execute\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"bytes\",\n            name: \"order\",\n            type: \"bytes\",\n          },\n          {\n            components: [\n              {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n              },\n              {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n              },\n            ],\n            internalType: \"struct Signature\",\n            name: \"sig\",\n            type: \"tuple\",\n          },\n        ],\n        internalType: \"struct SignedOrder[]\",\n        name: \"orders\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"address\",\n        name: \"fillContract\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"fillData\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"executeBatch\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"orderStatus\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"isCancelled\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isFilled\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"permitPost\",\n    outputs: [\n      {\n        internalType: \"contract IPermitPost\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"order\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"resolve\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"reactor\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct OrderInfo\",\n            name: \"info\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenAmount\",\n            name: \"input\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n              },\n            ],\n            internalType: \"struct Output[]\",\n            name: \"outputs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct ResolvedOrder\",\n        name: \"resolvedOrder\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x60a060405234801561001057600080fd5b506040516116ee3803806116ee83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161165d6100916000396000818160f10152610be0015261165d6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632dff692d1461005c57806386114adf146100a45780638bcaadbd146100b9578063e4056186146100cc578063f45d6b23146100ec575b600080fd5b61008861006a366004610d4a565b60006020819052908152604090205460ff8082169161010090041682565b6040805192151583529015156020830152015b60405180910390f35b6100b76100b2366004610dc7565b61012b565b005b6100b76100c7366004610e78565b61036a565b6100df6100da366004610ef7565b6104b8565b60405161009b9190610fe0565b6101137f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161009b565b6000846001600160401b0381111561014557610145610ffa565b60405190808252806020026020018201604052801561017e57816020015b61016b610d00565b8152602001906001900390816101635790505b5090506000856001600160401b0381111561019b5761019b610ffa565b6040519080825280602002602001820160405280156101c4578160200160208202803683370190505b5090506000866001600160401b038111156101e1576101e1610ffa565b60405190808252806020026020018201604052801561022c57816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816101ff5790505b50905060005b878110156103515761026b89898381811061024f5761024f611010565b90506020028101906102619190611026565b6100da9080611046565b84828151811061027d5761027d611010565b602002602001018190525088888281811061029a5761029a611010565b90506020028101906102ac9190611026565b6102b69080611046565b6040516102c492919061108c565b60405180910390208382815181106102de576102de611010565b6020026020010181815250508888828181106102fc576102fc611010565b905060200281019061030e9190611026565b6020018036038101906103219190611138565b82828151811061033357610333611010565b60200260200101819052508080610349906111b5565b915050610232565b506103608382848989896106a5565b5050505050505050565b604080516001808252818301909252600091816020015b610389610d00565b8152602001906001900390816103815790505090506103ab6100da8680611046565b816000815181106103be576103be611010565b60209081029190910101526040805160018082528183019092526000918160200160208202803683370190505090506103f78680611046565b60405161040592919061108c565b60405180910390208160008151811061042057610420611010565b6020908102919091010152604080516001808252818301909252600091816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161044257905050905061048336889003880160208901611138565b8160008151811061049657610496611010565b60200260200101819052506104af8382848989896106a5565b50505050505050565b6104c0610d00565b60006104ce838501856112e9565b90506104d98161094f565b60008160800151516001600160401b038111156104f8576104f8610ffa565b60405190808252806020026020018201604052801561054357816020015b60408051606081018252600080825260208083018290529282015282526000199092019101816105165790505b50905060005b81518110156106815760008360800151828151811061056a5761056a611010565b602002602001015190506000428560400151111580610590575081604001518260200151145b156105a05750604081015161061a565b428560200151106105b65750602081015161061a565b60008560200151426105c891906113bf565b90506000866020015187604001516105e091906113bf565b90506000846040015185602001516105f891906113bf565b90506106058184846109a7565b856020015161061491906113bf565b93505050505b604051806060016040528083600001516001600160a01b0316815260200182815260200183606001516001600160a01b031681525084848151811061066157610661611010565b602002602001018190525050508080610679906111b5565b915050610549565b50604080516060808201835284518252939093015160208401528201529392505050565b60005b8651811015610762576106d78782815181106106c6576106c6611010565b6020026020010151600001516109c6565b6106f98582815181106106ec576106ec611010565b6020026020010151610a15565b61075087828151811061070e5761070e611010565b602002602001015187838151811061072857610728611010565b602002602001015187848151811061074257610742611010565b602002602001015187610aa9565b8061075a816111b5565b9150506106a8565b506040516389930d2760e01b81526001600160a01b038416906389930d2790610793908990869086906004016113d8565b600060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b5050505060005b86518110156104af5760005b8782815181106107e6576107e6611010565b602002602001015160400151518110156108d857600088838151811061080e5761080e611010565b602002602001015160400151828151811061082b5761082b611010565b60209081029190910181015180516040808301519383015190516323b872dd60e01b81526001600160a01b038b811660048301529485166024820152604481019190915291935091909116906323b872dd906064016020604051808303816000875af115801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190611462565b505080806108d0906111b5565b9150506107d4565b507fba7599121d7877246723714eb403e13928cdbebe980abf7c630c0f9bef83fce185828151811061090c5761090c611010565b6020026020010151336040516109359291909182526001600160a01b0316602082015260400190565b60405180910390a180610947816111b5565b9150506107c8565b806020015181604001511161097757604051630c0b96df60e21b815260040160405180910390fd5b806040015181600001516040015110156109a45760405163773a618760e01b815260040160405180910390fd5b50565b8282028115158415858304851417166109bf57600080fd5b0492915050565b80516001600160a01b031630146109f057604051631377d29960e21b815260040160405180910390fd5b80604001514211156109a45760405163387b2e5560e11b815260040160405180910390fd5b6000818152602081815260409182902082518084019093525460ff808216158015855261010090920416151591830191909152610a68576040516001622a81af60e21b0319815260040160405180910390fd5b806020015115610a8b5760405163ee3b3d4b60e01b815260040160405180910390fd5b506000908152602081905260409020805461ff001916610100179055565b60006040518060800160405280610ac38760200151610c5a565b8152306020820152865160409081015181830152606090910185905280516001808252818301909252919250600091908160200160208202803683370190505090508281600081518110610b1957610b19611010565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050600081600081518110610b6b57610b6b611010565b602090810291909101015260408051600180825281830190925260009181602001602082028036833701905050905087602001516020015181600081518110610bb657610bb6611010565b6020908102919091018101919091528851015160405163771d599360e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163ee3ab32691610c1e918891889188918891908f906004016114f8565b600060405180830381600087803b158015610c3857600080fd5b505af1158015610c4c573d6000803e3d6000fd5b505050505050505050505050565b604080516001808252818301909252606091816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610c71579050506040805160808101909152909150806000815260200183600001516001600160a01b0316815260200183602001518152602001600081525081600081518110610cf057610cf0611010565b6020026020010181905250919050565b6040805160c0810182526000606082018181526080830182905260a08301829052825282518084019093528083526020838101919091529091908201908152602001606081525090565b600060208284031215610d5c57600080fd5b5035919050565b80356001600160a01b0381168114610d7a57600080fd5b919050565b60008083601f840112610d9157600080fd5b5081356001600160401b03811115610da857600080fd5b602083019150836020828501011115610dc057600080fd5b9250929050565b600080600080600060608688031215610ddf57600080fd5b85356001600160401b0380821115610df657600080fd5b818801915088601f830112610e0a57600080fd5b813581811115610e1957600080fd5b8960208260051b8501011115610e2e57600080fd5b60208301975080965050610e4460208901610d63565b94506040880135915080821115610e5a57600080fd5b50610e6788828901610d7f565b969995985093965092949392505050565b60008060008060608587031215610e8e57600080fd5b84356001600160401b0380821115610ea557600080fd5b9086019060808289031215610eb957600080fd5b819550610ec860208801610d63565b94506040870135915080821115610ede57600080fd5b50610eeb87828801610d7f565b95989497509550505050565b60008060208385031215610f0a57600080fd5b82356001600160401b03811115610f2057600080fd5b610f2c85828601610d7f565b90969095509350505050565b600060c08301825160018060a01b038082511686526020808301518188015260408084015181890152818701519350606083855116818a01528285015160808a015281880151945060c060a08a015285855180885260e08b0191508487019750600096505b80871015610fd25787518051871683528581015186840152840151861684830152968401966001969096019590820190610f9d565b509998505050505050505050565b602081526000610ff36020830184610f38565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e1983360301811261103c57600080fd5b9190910192915050565b6000808335601e1984360301811261105d57600080fd5b8301803591506001600160401b0382111561107757600080fd5b602001915036819003821315610dc057600080fd5b8183823760009101908152919050565b604051608081016001600160401b03811182821017156110be576110be610ffa565b60405290565b60405160a081016001600160401b03811182821017156110be576110be610ffa565b604051606081016001600160401b03811182821017156110be576110be610ffa565b604051601f8201601f191681016001600160401b038111828210171561113057611130610ffa565b604052919050565b60006060828403121561114a57600080fd5b604051606081018181106001600160401b038211171561116c5761116c610ffa565b604052823560ff8116811461118057600080fd5b8152602083810135908201526040928301359281019290925250919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016111c7576111c761119f565b5060010190565b6000604082840312156111e057600080fd5b604051604081018181106001600160401b038211171561120257611202610ffa565b60405290508061121183610d63565b8152602083013560208201525092915050565b600082601f83011261123557600080fd5b813560206001600160401b0382111561125057611250610ffa565b61125e818360051b01611108565b82815260079290921b8401810191818101908684111561127d57600080fd5b8286015b848110156112de576080818903121561129a5760008081fd5b6112a261109c565b6112ab82610d63565b815281850135858201526040808301359082015260606112cc818401610d63565b90820152835291830191608001611281565b509695505050505050565b6000602082840312156112fb57600080fd5b81356001600160401b038082111561131257600080fd5b9083019081850361010081121561132857600080fd5b6113306110c4565b606082121561133e57600080fd5b6113466110e6565b915061135184610d63565b82526020840135602083015260408401356040830152818152606084013560208201526080840135604082015261138b8760a086016111ce565b606082015260e08401359150828211156113a457600080fd5b6113b087838601611224565b60808201529695505050505050565b818103818111156113d2576113d261119f565b92915050565b6000604082016040835280865180835260608501915060608160051b8601019250602080890160005b8381101561142f57605f1988870301855261141d868351610f38565b95509382019390820190600101611401565b5050858403818701528684528688828601376000848801820152601f909601601f19169092019094019695505050505050565b60006020828403121561147457600080fd5b81518015158114610ff357600080fd5b600081518084526020808501945080840160005b838110156114bd5781516001600160a01b031687529582019590820190600101611498565b509495945050505050565b600081518084526020808501945080840160005b838110156114bd578151875295820195908201906001016114dc565b61010080825287516080918301829052805161018084018190526000926101a0850192602092908301919085805b8281101561158557845180516003811061154e57634e487b7160e01b84526021600452602484fd5b8852808701516001600160a01b03168789015260408082015190890152606090810151908801529583019593850193600101611526565b5050508b8301516001600160a01b038116610120880152915060408c015161014087015260608c0151610160870152858403838701526115c5848c611484565b935085840360408701526115d9848b6114c8565b935085840360608701526115ed848a6114c8565b908601889052865160ff1660a0870152602087015160c0870152604087015160e0870152935061161c92505050565b97965050505050505056fea2646970667358221220007f61157eb182a19c6bb2113e137404955ca2226bf9d03355ce8396ddeaa98764736f6c63430008100033\";\n\ntype DutchLimitOrderReactorConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: DutchLimitOrderReactorConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class DutchLimitOrderReactor__factory extends ContractFactory {\n  constructor(...args: DutchLimitOrderReactorConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    _permitPost: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<DutchLimitOrderReactor> {\n    return super.deploy(\n      _permitPost,\n      overrides || {}\n    ) as Promise<DutchLimitOrderReactor>;\n  }\n  override getDeployTransaction(\n    _permitPost: PromiseOrValue<string>,\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(_permitPost, overrides || {});\n  }\n  override attach(address: string): DutchLimitOrderReactor {\n    return super.attach(address) as DutchLimitOrderReactor;\n  }\n  override connect(signer: Signer): DutchLimitOrderReactor__factory {\n    return super.connect(signer) as DutchLimitOrderReactor__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): DutchLimitOrderReactorInterface {\n    return new utils.Interface(_abi) as DutchLimitOrderReactorInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): DutchLimitOrderReactor {\n    return new Contract(\n      address,\n      _abi,\n      signerOrProvider\n    ) as DutchLimitOrderReactor;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../common\";\nimport type { OrderQuoter, OrderQuoterInterface } from \"../OrderQuoter\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"order\",\n        type: \"bytes\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Signature\",\n        name: \"sig\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"quote\",\n    outputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"reactor\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct OrderInfo\",\n            name: \"info\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenAmount\",\n            name: \"input\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n              },\n            ],\n            internalType: \"struct Output[]\",\n            name: \"outputs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct ResolvedOrder\",\n        name: \"result\",\n        type: \"tuple\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"reactor\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"nonce\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct OrderInfo\",\n            name: \"info\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenAmount\",\n            name: \"input\",\n            type: \"tuple\",\n          },\n          {\n            components: [\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n              },\n            ],\n            internalType: \"struct Output[]\",\n            name: \"outputs\",\n            type: \"tuple[]\",\n          },\n        ],\n        internalType: \"struct ResolvedOrder[]\",\n        name: \"resolvedOrders\",\n        type: \"tuple[]\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"reactorCallback\",\n    outputs: [],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x608060405234801561001057600080fd5b50610955806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806389930d271461003b578063b030bac314610050575b600080fd5b61004e610049366004610426565b610079565b005b61006361005e366004610581565b6100bf565b604051610070919061060b565b60405180910390f35b60008260008151811061008e5761008e6106bd565b60200260200101516040516020016100a6919061060b565b6040516020818303038152906040529050805181602001fd5b6100c76101b7565b60408381015181518083018352858152602080820186905283519081018452600081529251638bcaadbd60e01b81526001600160a01b0390921692638bcaadbd9261011792913091600401610719565b600060405180830381600087803b15801561013157600080fd5b505af1925050508015610142575060015b610183573d808015610170576040519150601f19603f3d011682016040523d82523d6000602084013e610175565b606091505b5061017f81610189565b9150505b92915050565b6101916101b7565b60c0825110156101a357815182602001fd5b818060200190518101906101839190610859565b6040805160c0810182526000606082018181526080830182905260a08301829052825282518084019093528083526020838101919091529091908201908152602001606081525090565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561023a5761023a610201565b60405290565b6040516060810167ffffffffffffffff8111828210171561023a5761023a610201565b604051601f8201601f1916810167ffffffffffffffff8111828210171561028c5761028c610201565b604052919050565b600067ffffffffffffffff8211156102ae576102ae610201565b5060051b60200190565b6001600160a01b03811681146102cd57600080fd5b50565b6000604082840312156102e257600080fd5b6102ea610217565b905081356102f7816102b8565b808252506020820135602082015292915050565b600082601f83011261031c57600080fd5b8135602061033161032c83610294565b610263565b8281526060928302850182019282820191908785111561035057600080fd5b8387015b858110156103a95781818a03121561036c5760008081fd5b610374610240565b813561037f816102b8565b81528186013586820152604080830135610398816102b8565b908201528452928401928101610354565b5090979650505050505050565b600082601f8301126103c757600080fd5b813567ffffffffffffffff8111156103e1576103e1610201565b6103f4601f8201601f1916602001610263565b81815284602083860101111561040957600080fd5b816020850160208301376000918101602001919091529392505050565b600080604080848603121561043a57600080fd5b833567ffffffffffffffff8082111561045257600080fd5b818601915086601f83011261046657600080fd5b8135602061047661032c83610294565b82815260059290921b8401810191818101908a84111561049557600080fd5b8286015b84811015610552578035868111156104b057600080fd5b8701808d03601f190160c08112156104c85760008081fd5b6104d0610240565b6060808312156104e05760008081fd5b6104e8610240565b9250878401356104f7816102b8565b8352838c0135888401528301358b8301528181526105188f608085016102d0565b8782015260c08301359150888211156105315760008081fd5b61053f8f888486010161030b565b818c015285525050918301918301610499565b509750508701359350508083111561056957600080fd5b5050610577858286016103b6565b9150509250929050565b600080828403608081121561059557600080fd5b833567ffffffffffffffff8111156105ac57600080fd5b6105b8868287016103b6565b9350506060601f19820112156105cd57600080fd5b506105d6610240565b602084013560ff811681146105ea57600080fd5b81526040848101356020830152606090940135938101939093525092909150565b6020808252825180516001600160a01b039081168484015281830151604080860191909152918201516060808601919091528584015180518316608087015284015160a08601528286015160c080870152805160e0870181905260009594918501938693909290916101008901905b808610156106af578651805186168352888101518984015283015185168383015295870195600195909501949083019061067a565b509998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b818110156106f9576020818501810151868301820152016106dd565b506000602082860101526020601f19601f83011685010191505092915050565b60608152600084516080606084015261073560e08401826106d3565b9050602086015160ff8151166080850152602081015160a0850152604081015160c08501525060018060a01b0385166020840152828103604084015261077b81856106d3565b9695505050505050565b60006040828403121561079757600080fd5b61079f610217565b905081516107ac816102b8565b808252506020820151602082015292915050565b600082601f8301126107d157600080fd5b815160206107e161032c83610294565b8281526060928302850182019282820191908785111561080057600080fd5b8387015b858110156103a95781818a03121561081c5760008081fd5b610824610240565b815161082f816102b8565b81528186015186820152604080830151610848816102b8565b908201528452928401928101610804565b60006020828403121561086b57600080fd5b815167ffffffffffffffff8082111561088357600080fd5b9083019081850360c081121561089857600080fd5b6108a0610240565b60608212156108ae57600080fd5b6108b6610240565b915083516108c3816102b8565b8083525060208401516020830152604084015160408301528181526108eb8760608601610785565b602082015260a084015191508282111561090457600080fd5b610910878386016107c0565b6040820152969550505050505056fea2646970667358221220ff9e542de14d43a693a13064b7d6ddb028a4a1fa585b49b01c69e98897b6627b64736f6c63430008100033\";\n\ntype OrderQuoterConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: OrderQuoterConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class OrderQuoter__factory extends ContractFactory {\n  constructor(...args: OrderQuoterConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<OrderQuoter> {\n    return super.deploy(overrides || {}) as Promise<OrderQuoter>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): OrderQuoter {\n    return super.attach(address) as OrderQuoter;\n  }\n  override connect(signer: Signer): OrderQuoter__factory {\n    return super.connect(signer) as OrderQuoter__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): OrderQuoterInterface {\n    return new utils.Interface(_abi) as OrderQuoterInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): OrderQuoter {\n    return new Contract(address, _abi, signerOrProvider) as OrderQuoter;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport { Signer, utils, Contract, ContractFactory, Overrides } from \"ethers\";\nimport type { Provider, TransactionRequest } from \"@ethersproject/providers\";\nimport type { PromiseOrValue } from \"../common\";\nimport type { PermitPost, PermitPostInterface } from \"../PermitPost\";\n\nconst _abi = [\n  {\n    inputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    inputs: [],\n    name: \"DeadlinePassed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidAmount\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidId\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"InvalidSignature\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NonceUsed\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"NotSpender\",\n    type: \"error\",\n  },\n  {\n    inputs: [],\n    name: \"_PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"_TOKEN_DETAILS_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"bitmapPositions\",\n    outputs: [\n      {\n        internalType: \"uint248\",\n        name: \"wordPos\",\n        type: \"uint248\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"bitPos\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"invalidateNonces\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint248\",\n        name: \"wordPos\",\n        type: \"uint248\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"mask\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"invalidateUnorderedNonces\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"isUsedUnorderedNonce\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"used\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint248\",\n        name: \"\",\n        type: \"uint248\",\n      },\n    ],\n    name: \"nonceBitmap\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"enum TokenType\",\n                name: \"tokenType\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"maxAmount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenDetails[]\",\n            name: \"tokens\",\n            type: \"tuple[]\",\n          },\n          {\n            internalType: \"address\",\n            name: \"spender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"witness\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Permit\",\n        name: \"permit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"to\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"ids\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Signature\",\n        name: \"sig\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            components: [\n              {\n                internalType: \"enum TokenType\",\n                name: \"tokenType\",\n                type: \"uint8\",\n              },\n              {\n                internalType: \"address\",\n                name: \"token\",\n                type: \"address\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"maxAmount\",\n                type: \"uint256\",\n              },\n              {\n                internalType: \"uint256\",\n                name: \"id\",\n                type: \"uint256\",\n              },\n            ],\n            internalType: \"struct TokenDetails[]\",\n            name: \"tokens\",\n            type: \"tuple[]\",\n          },\n          {\n            internalType: \"address\",\n            name: \"spender\",\n            type: \"address\",\n          },\n          {\n            internalType: \"uint256\",\n            name: \"deadline\",\n            type: \"uint256\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"witness\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Permit\",\n        name: \"permit\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"to\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"ids\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"amounts\",\n        type: \"uint256[]\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"uint8\",\n            name: \"v\",\n            type: \"uint8\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"r\",\n            type: \"bytes32\",\n          },\n          {\n            internalType: \"bytes32\",\n            name: \"s\",\n            type: \"bytes32\",\n          },\n        ],\n        internalType: \"struct Signature\",\n        name: \"sig\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"unorderedTransferFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nconst _bytecode =\n  \"0x61014060405234801561001157600080fd5b50604080518082018252600a81526914195c9b5a5d141bdcdd60b21b6020808301918252835180850190945260018452603160f81b908401528151902060e08190527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100f18184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061010692505050565b60805160a05160c05160e05161010051610120516113ce6101556000396000610b9701526000610be601526000610bc101526000610b1a01526000610b4401526000610b6e01526113ce6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637ecebe00116100665780637ecebe00146101a7578063982aaf6b146101c7578063a44ba4ef146101ee578063b2a2ee671461022b578063ee3ab3261461023e57600080fd5b80631e459b98146100a357806322f888e7146100fa578063350a62b41461010f57806364eb31841461014a5780636a9009ae1461017f575b600080fd5b6100e56100b1366004610e61565b6001600160a01b0391909116600090815260208181526040808320600885901c845290915290205460ff9091161c60011690565b60405190151581526020015b60405180910390f35b61010d610108366004610e8b565b610251565b005b61010d61011d366004610ebb565b336000908152602081815260408083206001600160f81b0390951683529390529190912080549091179055565b6101717f15d73fd3389658d5d3b3e32a847b53c30a229bdcd21f7078cde26cc4d0d3f1cc81565b6040519081526020016100f1565b61017161018d366004610ed7565b600060208181529281526040808220909352908152205481565b6101716101b5366004610f0a565b60016020526000908152604090205481565b6101717f0eb37ebaa42bd9140c20b84947b8f4faa6c3bb28b233e2f3acd91fec0317fe2681565b61020a6101fc366004610e8b565b600881901c9160ff90911690565b604080516001600160f81b03909316835260ff9091166020830152016100f1565b61010d610239366004610fa2565b610278565b61010d61024c366004611083565b6103c3565b3360009081526001602052604081208054839290610270908490611163565b909155505050565b6102858984848888610518565b60006102bb8a8360016102b68d6001600160a01b031660009081526001602081905260409091208054918201905590565b61068a565b9050886001600160a01b0316816001600160a01b0316146102ef57604051638baa579f60e01b815260040160405180910390fd5b60005b6102fc8b80611176565b90508110156103b65760006103118c80611176565b83818110610321576103216111c0565b90506080020180360381019061033791906111ec565b90506103a5816000015182602001518d8d8d87818110610359576103596111c0565b905060200201602081019061036e9190610f0a565b8c8c88818110610380576103806111c0565b905060200201358b8b89818110610399576103996111c0565b90506020020135610855565b506103af81611272565b90506102f2565b5050505050505050505050565b6103d08985858989610518565b60006103df8a8360008661068a565b6001600160a01b038116600090815260208181526040808320600888901c845290915290205490915060ff84161c6001161561042e57604051631f6d5aef60e01b815260040160405180910390fd5b6001600160a01b038116600090815260208181526040808320600887901c845290915281208054600160ff87161b1790555b61046a8b80611176565b90508110156103b657600061047f8c80611176565b8381811061048f5761048f6111c0565b9050608002018036038101906104a591906111ec565b905061050781600001518260200151858e8e878181106104c7576104c76111c0565b90506020020160208101906104dc9190610f0a565b8d8d888181106104ee576104ee6111c0565b905060200201358c8c89818110610399576103996111c0565b5061051181611272565b9050610460565b6105286040860160208701610f0a565b6001600160a01b0316336001600160a01b0316146105595760405163e79dd39160e01b815260040160405180910390fd5b846040013542111561057e5760405163387b2e5560e11b815260040160405180910390fd5b60005b61058b8680611176565b90508110156106005761059e8680611176565b828181106105ae576105ae6111c0565b905060800201604001358585838181106105ca576105ca6111c0565b9050602002013511156105f05760405163162908e360e11b815260040160405180910390fd5b6105f981611272565b9050610581565b5060005b61060e8680611176565b9050811015610682576106218680611176565b82818110610631576106316111c0565b9050608002016060013583838381811061064d5761064d6111c0565b905060200201351461067257604051631bf4348160e31b815260040160405180910390fd5b61067b81611272565b9050610604565b505050505050565b6000806106978680611176565b905067ffffffffffffffff8111156106b1576106b16111d6565b6040519080825280602002602001820160405280156106da578160200160208202803683370190505b50905060005b6106ea8780611176565b90508110156107585761072b6107008880611176565b83818110610710576107106111c0565b90506080020180360381019061072691906111ec565b6109b0565b82828151811061073d5761073d6111c0565b602090810291909101015261075181611272565b90506106e0565b5060006107f67f0eb37ebaa42bd9140c20b84947b8f4faa6c3bb28b233e2f3acd91fec0317fe268684604051602001610791919061128b565b604051602081830303815290604052805190602001208a60200160208101906107ba9190610f0a565b8b604001358c606001358a6040516020016107db97969594939291906112d7565b60405160208183030381529060405280519060200120610a02565b9050600061081a8261080b60208a018a611327565b89602001358a60400135610a56565b90506001600160a01b03811661084357604051638baa579f60e01b815260040160405180910390fd5b925061084d915050565b949350505050565b6000866002811115610869576108696112c1565b03610888576108836001600160a01b038616858584610a7e565b610682565b600186600281111561089c5761089c6112c1565b03610910576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd90606401600060405180830381600087803b1580156108f357600080fd5b505af1158015610907573d6000803e3d6000fd5b50505050610682565b6002866002811115610924576109246112c1565b0361068257604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b15801561099057600080fd5b505af11580156109a4573d6000803e3d6000fd5b50505050505050505050565b60007f15d73fd3389658d5d3b3e32a847b53c30a229bdcd21f7078cde26cc4d0d3f1cc826040516020016109e592919061134a565b604051602081830303815290604052805190602001209050919050565b6000610a50610a0f610b0d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610a6787878787610c34565b91509150610a7481610cf8565b5095945050505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610b065760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064015b60405180910390fd5b5050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610b6657507f000000000000000000000000000000000000000000000000000000000000000046145b15610b9057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610c6b5750600090506003610cef565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610cbf573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610ce857600060019250925050610cef565b9150600090505b94509492505050565b6000816004811115610d0c57610d0c6112c1565b03610d145750565b6001816004811115610d2857610d286112c1565b03610d755760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610afd565b6002816004811115610d8957610d896112c1565b03610dd65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610afd565b6003816004811115610dea57610dea6112c1565b03610e425760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610afd565b50565b80356001600160a01b0381168114610e5c57600080fd5b919050565b60008060408385031215610e7457600080fd5b610e7d83610e45565b946020939093013593505050565b600060208284031215610e9d57600080fd5b5035919050565b80356001600160f81b0381168114610e5c57600080fd5b60008060408385031215610ece57600080fd5b610e7d83610ea4565b60008060408385031215610eea57600080fd5b610ef383610e45565b9150610f0160208401610ea4565b90509250929050565b600060208284031215610f1c57600080fd5b610f2582610e45565b9392505050565b600060808284031215610f3e57600080fd5b50919050565b60008083601f840112610f5657600080fd5b50813567ffffffffffffffff811115610f6e57600080fd5b6020830191508360208260051b8501011115610f8957600080fd5b9250929050565b600060608284031215610f3e57600080fd5b60008060008060008060008060006101008a8c031215610fc157600080fd5b893567ffffffffffffffff80821115610fd957600080fd5b610fe58d838e01610f2c565b9a50610ff360208d01610e45565b995060408c013591508082111561100957600080fd5b6110158d838e01610f44565b909950975060608c013591508082111561102e57600080fd5b61103a8d838e01610f44565b909750955060808c013591508082111561105357600080fd5b506110608c828d01610f44565b909450925061107490508b60a08c01610f90565b90509295985092959850929598565b60008060008060008060008060006101008a8c0312156110a257600080fd5b893567ffffffffffffffff808211156110ba57600080fd5b6110c68d838e01610f2c565b9a5060208c01359150808211156110dc57600080fd5b6110e88d838e01610f44565b909a50985060408c013591508082111561110157600080fd5b61110d8d838e01610f44565b909850965060608c013591508082111561112657600080fd5b506111338c828d01610f44565b90955093505060808a013591506110748b60a08c01610f90565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a5057610a5061114d565b6000808335601e1984360301811261118d57600080fd5b83018035915067ffffffffffffffff8211156111a857600080fd5b6020019150600781901b3603821315610f8957600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000608082840312156111fe57600080fd5b6040516080810181811067ffffffffffffffff8211171561122f57634e487b7160e01b600052604160045260246000fd5b60405282356003811061124157600080fd5b815261124f60208401610e45565b602082015260408301356040820152606083013560608201528091505092915050565b6000600182016112845761128461114d565b5060010190565b815160009082906020808601845b838110156112b557815185529382019390820190600101611299565b50929695505050505050565b634e487b7160e01b600052602160045260246000fd5b87815260e08101600288106112ee576112ee6112c1565b602082019790975260408101959095526001600160a01b03939093166060850152608084019190915260a083015260c090910152919050565b60006020828403121561133957600080fd5b813560ff81168114610f2557600080fd5b828152815160a082019060038110611364576113646112c1565b8060208401525060018060a01b0360208401511660408301526040830151606083015260608301516080830152939250505056fea2646970667358221220c73380fe553c2742f9f7a900d083ac8df57285b022c85d7973d649a06209920364736f6c63430008100033\";\n\ntype PermitPostConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: PermitPostConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class PermitPost__factory extends ContractFactory {\n  constructor(...args: PermitPostConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override deploy(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): Promise<PermitPost> {\n    return super.deploy(overrides || {}) as Promise<PermitPost>;\n  }\n  override getDeployTransaction(\n    overrides?: Overrides & { from?: PromiseOrValue<string> }\n  ): TransactionRequest {\n    return super.getDeployTransaction(overrides || {});\n  }\n  override attach(address: string): PermitPost {\n    return super.attach(address) as PermitPost;\n  }\n  override connect(signer: Signer): PermitPost__factory {\n    return super.connect(signer) as PermitPost__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): PermitPostInterface {\n    return new utils.Interface(_abi) as PermitPostInterface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): PermitPost {\n    return new Contract(address, _abi, signerOrProvider) as PermitPost;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Multicall2, Multicall2Interface } from \"../Multicall2\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"aggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes[]\",\n        name: \"returnData\",\n        type: \"bytes[]\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"blockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getBlockNumber\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockCoinbase\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"coinbase\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockDifficulty\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"difficulty\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockGasLimit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"gaslimit\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getCurrentBlockTimestamp\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"timestamp\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getEthBalance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getLastBlockHash\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryAggregate\",\n    outputs: [\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bool\",\n        name: \"requireSuccess\",\n        type: \"bool\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Call[]\",\n        name: \"calls\",\n        type: \"tuple[]\",\n      },\n    ],\n    name: \"tryBlockAndAggregate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"blockNumber\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"blockHash\",\n        type: \"bytes32\",\n      },\n      {\n        components: [\n          {\n            internalType: \"bool\",\n            name: \"success\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"returnData\",\n            type: \"bytes\",\n          },\n        ],\n        internalType: \"struct Multicall2.Result[]\",\n        name: \"returnData\",\n        type: \"tuple[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n];\n\nexport class Multicall2__factory {\n  static readonly abi = _abi;\n  static createInterface(): Multicall2Interface {\n    return new utils.Interface(_abi) as Multicall2Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Multicall2 {\n    return new Contract(address, _abi, signerOrProvider) as Multicall2;\n  }\n}\n","// Uses deployless multicall to fetch responses and errors for multiple calls at once\n// https://github.com/Destiner/deployless-multicall\n\nimport { BaseProvider } from '@ethersproject/providers';\nimport { Interface } from '@ethersproject/abi';\nimport { hexConcat } from '@ethersproject/bytes';\nimport deploylessMulticall2Abi from '../../abis/deploylessMulticall2.json';\nimport multicall2Abi from '../../abis/multicall2.json';\nimport { Multicall2__factory } from '../contracts';\n\nconst MULTICALL_ADDRESS = '0x5ba1e12693dc8f9c48aad8770482f4739beed696';\nconst DEPLOYLESS_MULTICALL_BYTECODE =\n  '0x608060405234801561001057600080fd5b5060405161087538038061087583398181016040528101906100329190610666565b6000815167ffffffffffffffff81111561004f5761004e610358565b5b60405190808252806020026020018201604052801561008857816020015b6100756102da565b81526020019060019003908161006d5790505b50905060005b82518110156101d3576000808483815181106100ad576100ac6106c2565b5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168584815181106100e2576100e16106c2565b5b6020026020010151602001516040516100fb9190610738565b6000604051808303816000865af19150503d8060008114610138576040519150601f19603f3d011682016040523d82523d6000602084013e61013d565b606091505b509150915085156101895781610188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017f906107d2565b60405180910390fd5b5b60405180604001604052808315158152602001828152508484815181106101b3576101b26106c2565b5b6020026020010181905250505080806101cb9061082b565b91505061008e565b50602081516040028260405103030160408160405103036001835111156102535760005b8351811015610251578060200260208501018160200260400183018261021f57855160200281525b6000831115610244576020808303510151602083510151038060208303510180835250505b50506001810190506101f7565b505b60005b8351811015610281578060200260208501018051516040602083510151035250600181019050610256565b5060005b83518110156102ae57806020026020850101604060208083510151035250600181019050610285565b506001835114156102cb5760208301604082018451602002815250505b60208152825160208201528181f35b6040518060400160405280600015158152602001606081525090565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b61031f8161030a565b811461032a57600080fd5b50565b60008151905061033c81610316565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61039082610347565b810181811067ffffffffffffffff821117156103af576103ae610358565b5b80604052505050565b60006103c26102f6565b90506103ce8282610387565b919050565b600067ffffffffffffffff8211156103ee576103ed610358565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104398261040e565b9050919050565b6104498161042e565b811461045457600080fd5b50565b60008151905061046681610440565b92915050565b600080fd5b600067ffffffffffffffff82111561048c5761048b610358565b5b61049582610347565b9050602081019050919050565b60005b838110156104c05780820151818401526020810190506104a5565b838111156104cf576000848401525b50505050565b60006104e86104e384610471565b6103b8565b9050828152602081018484840111156105045761050361046c565b5b61050f8482856104a2565b509392505050565b600082601f83011261052c5761052b610342565b5b815161053c8482602086016104d5565b91505092915050565b60006040828403121561055b5761055a610404565b5b61056560406103b8565b9050600061057584828501610457565b600083015250602082015167ffffffffffffffff81111561059957610598610409565b5b6105a584828501610517565b60208301525092915050565b60006105c46105bf846103d3565b6103b8565b905080838252602082019050602084028301858111156105e7576105e66103ff565b5b835b8181101561062e57805167ffffffffffffffff81111561060c5761060b610342565b5b8086016106198982610545565b855260208501945050506020810190506105e9565b5050509392505050565b600082601f83011261064d5761064c610342565b5b815161065d8482602086016105b1565b91505092915050565b6000806040838503121561067d5761067c610300565b5b600061068b8582860161032d565b925050602083015167ffffffffffffffff8111156106ac576106ab610305565b5b6106b885828601610638565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b6000610712826106f1565b61071c81856106fc565b935061072c8185602086016104a2565b80840191505092915050565b60006107448284610707565b915081905092915050565b600082825260208201905092915050565b7f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006107bc60218361074f565b91506107c782610760565b604082019050919050565b600060208201905081810360008301526107eb816107af565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b600061083682610821565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610869576108686107f2565b5b60018201905091905056fe';\n\nexport type MulticallParams<TFunctionParams> = {\n  address: string;\n  contractInterface: Interface;\n  functionName: string;\n  functionParams: TFunctionParams[];\n};\n\nexport type MulticallResult = {\n  success: boolean;\n  returnData: string;\n};\n\ntype Call = {\n  target: string;\n  callData: string;\n};\n\n// Perform multiple on-chain calls in a single http request\n// return all results including errors\n// Uses deployless method to function properly even on chains with no multicall contract deployed\nexport async function multicall<TFunctionParams extends any[] | undefined>(\n  provider: BaseProvider,\n  params: MulticallParams<TFunctionParams>\n): Promise<MulticallResult[]> {\n  const { address, contractInterface, functionName, functionParams } = params;\n\n  const fragment = contractInterface.getFunction(functionName);\n  const calls: Call[] = functionParams.map(functionParam => {\n    const callData = contractInterface.encodeFunctionData(\n      fragment,\n      functionParam\n    );\n\n    return {\n      target: address,\n      callData,\n    };\n  });\n\n  return getAggregatedCall(provider, calls);\n}\n\nasync function getAggregatedCall(\n  provider: BaseProvider,\n  calls: Call[]\n): Promise<MulticallResult[]> {\n  const code = await provider.getCode(MULTICALL_ADDRESS);\n  if (code.length > 2) {\n    const multicall = Multicall2__factory.connect(MULTICALL_ADDRESS, provider);\n    return await multicall.callStatic.tryAggregate(false, calls);\n  } else {\n    const deploylessInterface = new Interface(deploylessMulticall2Abi);\n    const args = deploylessInterface.encodeDeploy([false, calls]);\n    const data = hexConcat([DEPLOYLESS_MULTICALL_BYTECODE, args]);\n\n    const response = await provider.call({\n      data,\n    });\n    const multicallInterface = new Interface(multicall2Abi);\n    return multicallInterface.decodeFunctionResult('tryAggregate', response)\n      .returnData;\n  }\n}\n","import { BigNumber, ethers } from 'ethers';\nimport { BaseProvider } from '@ethersproject/providers';\n\nimport { PERMIT_POST_MAPPING } from '../constants';\nimport { PermitPost, PermitPost__factory } from '../contracts';\nimport { MissingConfiguration } from '../errors';\n\ninterface NonceData {\n  word: BigNumber;\n  bitmap: BigNumber;\n}\n\n/**\n * Helper to track PermitPost nonces for addresses\n */\nexport class NonceManager {\n  private permitPost: PermitPost;\n  private currentWord: Map<string, BigNumber>;\n  private currentBitmap: Map<string, BigNumber>;\n\n  constructor(\n    private provider: BaseProvider,\n    chainId: number,\n    permitPostAddress?: string\n  ) {\n    if (permitPostAddress) {\n      this.permitPost = PermitPost__factory.connect(\n        permitPostAddress,\n        provider\n      );\n    } else if (PERMIT_POST_MAPPING[chainId]) {\n      this.permitPost = PermitPost__factory.connect(\n        PERMIT_POST_MAPPING[chainId],\n        this.provider\n      );\n    } else {\n      throw new MissingConfiguration('orderQuoter', chainId.toString());\n    }\n\n    this.currentWord = new Map();\n    this.currentBitmap = new Map();\n  }\n\n  /**\n   * Finds the next unused nonce and returns it\n   * Marks the nonce as used so it won't be returned again from this instance\n   * NOTE: if any nonce usages are in-flight and created outside of this instance,\n   * this function will not know about them and will return duplicates\n   */\n  async useNonce(address: string): Promise<BigNumber> {\n    const { word, bitmap } = await this.getNextOpenWord(address);\n    const bitPos = getFirstUnsetBit(bitmap);\n\n    this.currentWord.set(address, word);\n    this.currentBitmap.set(address, setBit(bitmap, bitPos));\n\n    return buildNonce(word, bitPos);\n  }\n\n  async isUsed(address: string, nonce: BigNumber): Promise<boolean> {\n    const { word, bitPos } = splitNonce(nonce);\n    const bitmap = await this.permitPost.nonceBitmap(address, word);\n    return bitmap\n      .div(BigNumber.from(2).pow(bitPos))\n      .mod(2)\n      .eq(1);\n  }\n\n  // Returns the first word that contains empty bits\n  private async getNextOpenWord(address: string): Promise<NonceData> {\n    let currentWord: BigNumber =\n      this.currentWord.get(address) || BigNumber.from(0);\n    let bitmap =\n      this.currentBitmap.get(address) ||\n      (await this.permitPost.nonceBitmap(address, currentWord));\n\n    while (bitmap.eq(ethers.constants.MaxUint256)) {\n      currentWord = currentWord.add(1);\n      bitmap = await this.permitPost.nonceBitmap(address, currentWord);\n    }\n\n    return {\n      word: currentWord,\n      bitmap: bitmap,\n    };\n  }\n}\n\ninterface SplitNonce {\n  word: BigNumber;\n  bitPos: BigNumber;\n}\n\n// Splits a permitPost nonce into the word and bitPos\nexport function splitNonce(nonce: BigNumber): SplitNonce {\n  const word = nonce.div(256);\n  const bitPos = nonce.mod(256);\n  return { word, bitPos };\n}\n\n// Builds a permitPost nonce from the given word and bitPos\nexport function buildNonce(word: BigNumber, bitPos: number): BigNumber {\n  // word << 8\n  const shiftedWord = word.mul(256);\n  return shiftedWord.add(bitPos);\n}\n\n// Returns the position of the first unset bit\n// Returns -1 if all bits are set\nexport function getFirstUnsetBit(bitmap: BigNumber): number {\n  // Optimization if switch to library w/ bitwise operators:\n  // return ~bitmap + (bitmap + 1)\n  // instead we have to do a loop\n\n  for (let i = 0; i < 256; i++) {\n    if (\n      bitmap\n        .div(BigNumber.from(2).pow(i))\n        .mod(2)\n        .eq(0)\n    ) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n// Returns the given bignumber with the given bit set\n// Does nothing if the given bit is already set\nexport function setBit(bitmap: BigNumber, bitPos: number): BigNumber {\n  // Optimization if switch to library w/ bitwise operators:\n  // return bitmap & (1 << bitPos)\n\n  const mask: BigNumber = BigNumber.from(2).pow(bitPos);\n  if (\n    bitmap\n      .div(mask)\n      .mod(2)\n      .eq(1)\n  ) {\n    return bitmap;\n  }\n\n  return bitmap.add(mask);\n}\n","import { SignatureLike, splitSignature } from '@ethersproject/bytes';\nimport { BaseProvider } from '@ethersproject/providers';\nimport { ethers } from 'ethers';\n\nimport { multicall, MulticallResult } from './multicall';\nimport { MissingConfiguration } from '../errors';\nimport { ORDER_QUOTER_MAPPING } from '../constants';\nimport {\n  OrderQuoter as OrderQuoterContract,\n  OrderQuoter__factory,\n  DutchLimitOrderReactor__factory,\n} from '../contracts';\nimport { IOrder, TokenAmount } from '../order';\nimport { NonceManager } from './NonceManager';\n\nexport enum OrderValidation {\n  Expired,\n  AlreadyFilled,\n  Cancelled,\n  InsufficientFunds,\n  InvalidSignature,\n  InvalidOrderFields,\n  UnknownError,\n  OK,\n}\n\nexport interface ResolvedOrder {\n  input: TokenAmount;\n  outputs: TokenAmount[];\n}\n\nexport interface OrderQuote {\n  validation: OrderValidation;\n  // not specified if validation is not OK\n  quote: ResolvedOrder | undefined;\n}\n\nconst BASIC_ERROR = '0x08c379a0';\n\nconst KNOWN_ERRORS: { [key: string]: OrderValidation } = {\n  '8baa579f': OrderValidation.InvalidSignature,\n  '1f6d5aef': OrderValidation.Cancelled,\n  // invalid dutch decay time\n  '302e5b7c': OrderValidation.InvalidOrderFields,\n  // invalid dutch decay time\n  '773a6187': OrderValidation.InvalidOrderFields,\n  // invalid reactor address\n  '4ddf4a64': OrderValidation.InvalidOrderFields,\n  '70f65caa': OrderValidation.Expired,\n  ee3b3d4b: OrderValidation.AlreadyFilled,\n  TRANSFER_FROM_FAILED: OrderValidation.InsufficientFunds,\n};\n\nexport interface SignedOrder {\n  order: IOrder;\n  signature: SignatureLike;\n}\n\n/**\n * Order quoter\n */\nexport class OrderQuoter {\n  private orderQuoter: OrderQuoterContract;\n\n  constructor(\n    private provider: BaseProvider,\n    private chainId: number,\n    orderQuoterAddress?: string\n  ) {\n    if (orderQuoterAddress) {\n      this.orderQuoter = OrderQuoter__factory.connect(\n        orderQuoterAddress,\n        provider\n      );\n    } else if (ORDER_QUOTER_MAPPING[chainId]) {\n      this.orderQuoter = OrderQuoter__factory.connect(\n        ORDER_QUOTER_MAPPING[chainId],\n        this.provider\n      );\n    } else {\n      throw new MissingConfiguration('orderQuoter', chainId.toString());\n    }\n  }\n\n  async quote(order: SignedOrder): Promise<OrderQuote> {\n    return (await this.quoteBatch([order]))[0];\n  }\n\n  async quoteBatch(orders: SignedOrder[]): Promise<OrderQuote[]> {\n    const calls = orders.map(order => {\n      const { v, r, s } = splitSignature(order.signature);\n      return [order.order.serialize(), { v, r, s }];\n    });\n\n    const results = await multicall(this.provider, {\n      address: this.orderQuoter.address,\n      contractInterface: this.orderQuoter.interface,\n      functionName: 'quote',\n      functionParams: calls,\n    });\n\n    const validations = await this.getValidations(orders, results);\n    const quotes: (ResolvedOrder | undefined)[] = results.map(\n      ({ success, returnData }) => {\n        if (!success) {\n          return undefined;\n        }\n\n        const {\n          input,\n          outputs,\n        } = this.orderQuoter.interface.decodeFunctionResult(\n          'quote',\n          returnData\n        );\n        console.log(this.orderQuoter.interface.decodeFunctionResult('quote', returnData));\n        return {\n          input: input as TokenAmount,\n          outputs: outputs as TokenAmount[],\n        };\n      }\n    );\n\n    return validations.map((validation, i) => {\n      return {\n        validation,\n        quote: quotes[i],\n      };\n    });\n  }\n\n  private async getValidations(\n    orders: SignedOrder[],\n    results: MulticallResult[]\n  ): Promise<OrderValidation[]> {\n    const validations = results.map(result => {\n      if (result.success) {\n        return OrderValidation.OK;\n      } else {\n        let returnData = result.returnData;\n\n        // Parse traditional string error messages\n        if (returnData.startsWith(BASIC_ERROR)) {\n          returnData = new ethers.utils.AbiCoder().decode(\n            ['string'],\n            '0x' + returnData.slice(10)\n          )[0];\n        }\n\n        for (const key of Object.keys(KNOWN_ERRORS)) {\n          if (returnData.includes(key)) {\n            return KNOWN_ERRORS[key];\n          }\n        }\n      }\n\n      return OrderValidation.UnknownError;\n    });\n\n    return await this.checkTerminalStates(orders, validations);\n  }\n\n  // The quoter contract has a quirk that make validations inaccurate:\n  // - checks expiry before anything else, so old but already filled orders will return as canceled\n  // so this function takes orders in expired and already filled states and double checks them\n  private async checkTerminalStates(\n    orders: SignedOrder[],\n    validations: OrderValidation[]\n  ): Promise<OrderValidation[]> {\n    return await Promise.all(\n      validations.map(async (validation, i) => {\n        const order = orders[i];\n        if (validation === OrderValidation.Expired) {\n          // all reactors have the same orderStatus interface, we just use limitorder to implement the interface\n          const reactor = DutchLimitOrderReactor__factory.connect(\n            order.order.info.reactor,\n            this.provider\n          );\n          const orderStatus = await reactor.orderStatus(order.order.hash());\n          if (orderStatus.isFilled) {\n            return OrderValidation.AlreadyFilled;\n          } else {\n            const nonceManager = new NonceManager(\n              this.provider,\n              this.chainId,\n              await reactor.permitPost()\n            );\n            const maker = order.order.getSigner(order.signature);\n            const cancelled = await nonceManager.isUsed(\n              maker,\n              order.order.info.nonce\n            );\n            return cancelled ? OrderValidation.Cancelled : validation;\n          }\n        } else {\n          return validation;\n        }\n      })\n    );\n  }\n}\n","import { OrderQuoter, OrderValidation, SignedOrder } from './OrderQuoter';\n\n/**\n * Order validator\n */\nexport class OrderValidator extends OrderQuoter {\n  async validate(order: SignedOrder): Promise<OrderValidation> {\n    return (await super.quote(order)).validation;\n  }\n\n  async validateBatch(orders: SignedOrder[]): Promise<OrderValidation[]> {\n    return (await super.quoteBatch(orders)).map(order => order.validation);\n  }\n}\n","export * from './PermitPost';\nexport * from './OrderValidator';\nexport * from './NonceManager';\nexport * from './OrderQuoter';\n\nexport function stripHexPrefix(a: string): string {\n  if (a.startsWith('0x')) {\n    return a.slice(2);\n  } else {\n    return a;\n  }\n}\n","import { SignatureLike } from '@ethersproject/bytes';\nimport { BigNumber, ethers } from 'ethers';\n\nimport { PermitPost, PermitData, SigType, TokenType } from '../utils';\n\nimport { IOrder, OrderInfo, TokenAmount } from './types';\n\nexport type DutchOutput = {\n  readonly token: string;\n  readonly startAmount: BigNumber;\n  readonly endAmount: BigNumber;\n  readonly recipient: string;\n};\n\nexport type DutchLimitOrderInfo = OrderInfo & {\n  startTime: number;\n  endTime: number;\n  input: TokenAmount;\n  outputs: DutchOutput[];\n};\n\nconst DUTCH_LIMIT_ORDER_ABI = [\n  'tuple(' +\n    [\n      'tuple(address,uint256,uint256)',\n      'uint256',\n      'uint256',\n      'tuple(address,uint256)',\n      'tuple(address,uint256,uint256,address)[]',\n    ].join(',') +\n    ')',\n];\n\nexport class DutchLimitOrder implements IOrder {\n  public readonly permitPost: PermitPost;\n\n  constructor(\n    public readonly info: DutchLimitOrderInfo,\n    public readonly chainId: number,\n    public readonly permitPostAddress?: string\n  ) {\n    this.permitPost = new PermitPost(chainId, permitPostAddress);\n  }\n\n  static parse(encoded: string, chainId: number): DutchLimitOrder {\n    const abiCoder = new ethers.utils.AbiCoder();\n    const decoded = abiCoder.decode(DUTCH_LIMIT_ORDER_ABI, encoded);\n    const [\n      [\n        [reactor, nonce, deadline],\n        startTime,\n        endTime,\n        [inputToken, inputAmount],\n        outputs,\n      ],\n    ] = decoded;\n    return new DutchLimitOrder(\n      {\n        reactor,\n        nonce,\n        deadline: deadline.toNumber(),\n        startTime: startTime.toNumber(),\n        endTime: endTime.toNumber(),\n        input: { token: inputToken, amount: inputAmount },\n        outputs: outputs.map(\n          ([token, startAmount, endAmount, recipient]: [\n            string,\n            number,\n            number,\n            string\n          ]) => {\n            return {\n              token,\n              startAmount,\n              endAmount,\n              recipient,\n            };\n          }\n        ),\n      },\n      chainId\n    );\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  serialize(): string {\n    const abiCoder = new ethers.utils.AbiCoder();\n    return abiCoder.encode(DUTCH_LIMIT_ORDER_ABI, [\n      [\n        [this.info.reactor, this.info.nonce, this.info.deadline],\n        this.info.startTime,\n        this.info.endTime,\n        [this.info.input.token, this.info.input.amount],\n        this.info.outputs.map(output => [\n          output.token,\n          output.startAmount,\n          output.endAmount,\n          output.recipient,\n        ]),\n      ],\n    ]);\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  getSigner(signature: SignatureLike): string {\n    return ethers.utils.computeAddress(\n      ethers.utils.recoverPublicKey(\n        this.permitPost.getPermitDigest(this.permitData().values),\n        signature\n      )\n    );\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  permitData(): PermitData {\n    return this.permitPost.getPermitData({\n      sigType: SigType.Unordered,\n      tokens: [\n        {\n          tokenType: TokenType.ERC20,\n          token: this.info.input.token,\n          maxAmount: this.info.input.amount,\n          id: BigNumber.from(0),\n        },\n      ],\n      spender: this.info.reactor,\n      deadline: this.info.deadline,\n      witness: this.hash(),\n      nonce: this.info.nonce,\n    });\n  }\n\n  /**\n   * @inheritdoc IOrder\n   */\n  hash(): string {\n    return ethers.utils.keccak256(this.serialize());\n  }\n}\n","import invariant from 'tiny-invariant';\nimport { BigNumber } from 'ethers';\n\nimport { IOrder, OrderInfo } from '../order';\n\n/**\n * Builder for generating orders\n */\nexport abstract class OrderBuilder {\n  protected orderInfo: Partial<OrderInfo>;\n\n  constructor() {\n    this.orderInfo = {};\n  }\n\n  deadline(deadline: number): OrderBuilder {\n    invariant(\n      deadline > new Date().getTime() / 1000,\n      `Deadline must be in the future: ${deadline}`\n    );\n    this.orderInfo.deadline = deadline;\n    return this;\n  }\n\n  nonce(nonce: BigNumber): OrderBuilder {\n    this.orderInfo.nonce = nonce;\n    return this;\n  }\n\n  protected reactor(reactor: string): OrderBuilder {\n    this.orderInfo.reactor = reactor;\n    return this;\n  }\n\n  protected getOrderInfo(): OrderInfo {\n    invariant(this.orderInfo.reactor !== undefined, 'reactor not set');\n    invariant(this.orderInfo.nonce !== undefined, 'nonce not set');\n    invariant(this.orderInfo.deadline !== undefined, 'deadline not set');\n    return {\n      reactor: this.orderInfo.reactor,\n      nonce: this.orderInfo.nonce,\n      deadline: this.orderInfo.deadline,\n    };\n  }\n\n  abstract build(): IOrder;\n}\n","import { BigNumber } from 'ethers';\nimport invariant from 'tiny-invariant';\n\nimport { MissingConfiguration } from '../errors';\nimport { OrderType, REACTOR_ADDRESS_MAPPING } from '../constants';\n\nimport {\n  DutchLimitOrderInfo,\n  DutchOutput,\n  TokenAmount,\n  DutchLimitOrder,\n} from '../order';\nimport { OrderBuilder } from './OrderBuilder';\n\n/**\n * Helper builder for generating dutch limit orders\n */\nexport class DutchLimitOrderBuilder extends OrderBuilder {\n  private info: Partial<DutchLimitOrderInfo>;\n\n  constructor(\n    private chainId: number,\n    reactorAddress?: string,\n    private permitPostAddress?: string\n  ) {\n    super();\n\n    if (reactorAddress) {\n      this.reactor(reactorAddress);\n    } else if (\n      REACTOR_ADDRESS_MAPPING[chainId] &&\n      REACTOR_ADDRESS_MAPPING[chainId][OrderType.DutchLimit]\n    ) {\n      const reactorAddress =\n        REACTOR_ADDRESS_MAPPING[chainId][OrderType.DutchLimit];\n      this.reactor(reactorAddress);\n    } else {\n      throw new MissingConfiguration('reactor', chainId.toString());\n    }\n\n    this.info = {\n      outputs: [],\n    };\n  }\n\n  startTime(startTime: number): DutchLimitOrderBuilder {\n    invariant(\n      !this.info.endTime || startTime <= this.info.endTime,\n      `startTime must be before endTime: ${startTime}`\n    );\n\n    invariant(\n      !this.orderInfo.deadline || startTime <= this.orderInfo.deadline,\n      `startTime must be before deadline: ${startTime}`\n    );\n    this.info.startTime = startTime;\n    return this;\n  }\n\n  endTime(endTime: number): DutchLimitOrderBuilder {\n    invariant(\n      !this.info.startTime || endTime >= this.info.startTime,\n      `endTime must be after startTime: ${endTime}`\n    );\n    invariant(\n      !this.orderInfo.deadline || endTime <= this.orderInfo.deadline,\n      `endTime must be before deadline: ${endTime}`\n    );\n    this.info.endTime = endTime;\n    return this;\n  }\n\n  input(input: TokenAmount): DutchLimitOrderBuilder {\n    this.info.input = input;\n    return this;\n  }\n\n  output(output: DutchOutput): DutchLimitOrderBuilder {\n    if (!this.info.outputs) {\n      this.info.outputs = [];\n    }\n    this.info.outputs.push(output);\n    return this;\n  }\n\n  deadline(deadline: number): DutchLimitOrderBuilder {\n    super.deadline(deadline);\n    return this;\n  }\n\n  nonce(nonce: BigNumber): DutchLimitOrderBuilder {\n    super.nonce(nonce);\n    return this;\n  }\n\n  build(): DutchLimitOrder {\n    invariant(this.info.startTime !== undefined, 'startTime not set');\n    invariant(this.info.endTime !== undefined, 'endTime not set');\n    invariant(this.info.input !== undefined, 'input not set');\n    invariant(\n      this.info.outputs !== undefined && this.info.outputs.length !== 0,\n      'outputs not set'\n    );\n\n    return new DutchLimitOrder(\n      Object.assign(this.getOrderInfo(), {\n        startTime: this.info.startTime,\n        endTime: this.info.endTime,\n        input: this.info.input,\n        outputs: this.info.outputs,\n      }),\n      this.chainId,\n      this.permitPostAddress\n    );\n  }\n}\n","import { OrderType, REVERSE_REACTOR_MAPPING } from '../constants';\nimport { stripHexPrefix } from '../utils';\n\nimport { IOrder } from './types';\nimport { DutchLimitOrder } from './DutchLimitOrder';\nimport { MissingConfiguration } from '../errors';\n\nexport * from './DutchLimitOrder';\nexport * from './types';\n\n/**\n * Parses a given serialized order\n * @return Parsed order object\n */\nexport function parseOrder(order: string): IOrder {\n  // reactor address is always the first field in order\n  const reactor =\n    '0x' +\n    stripHexPrefix(order)\n      .slice(0, 40)\n      .toLowerCase();\n\n  if (!REVERSE_REACTOR_MAPPING[reactor]) {\n    throw new MissingConfiguration('reactor', reactor);\n  }\n\n  const { chainId, orderType } = REVERSE_REACTOR_MAPPING[reactor];\n  switch (orderType) {\n    case OrderType.DutchLimit:\n      return DutchLimitOrder.parse(order, chainId);\n    default:\n      throw new MissingConfiguration('orderType', orderType);\n  }\n}\n"],"names":["OrderType","PERMIT_POST_MAPPING","1","12341234","ORDER_QUOTER_MAPPING","REACTOR_ADDRESS_MAPPING","DutchLimit","REVERSE_REACTOR_MAPPING","Object","entries","reduce","acc","chainId","orderType","toLowerCase","parseInt","TokenType","SigType","MissingConfiguration","key","value","_this","setPrototypeOf","prototype","_inheritsLoose","Error","PermitPost","address","permitPostAddress","this","toString","_proto","getPermitData","info","domain","types","values","getPermitDigest","ethers","utils","_TypedDataEncoder","hash","get","name","version","verifyingContract","Permit","type","TokenDetails","_abi","inputs","internalType","stateMutability","anonymous","indexed","components","outputs","_bytecode","isSuperArgs","xs","length","DutchLimitOrderReactor__factory","args","deploy","_permitPost","overrides","getDeployTransaction","attach","connect","signer","createInterface","Interface","signerOrProvider","Contract","ContractFactory","bytecode","abi","OrderQuoter__factory","PermitPost__factory","payable","Multicall2__factory","MULTICALL_ADDRESS","DEPLOYLESS_MULTICALL_BYTECODE","multicall","provider","params","functionParams","fragment","contractInterface","getFunction","functionName","calls","map","functionParam","callData","encodeFunctionData","target","getAggregatedCall","_context2","getCode","callStatic","tryAggregate","deploylessInterface","deploylessMulticall2Abi","encodeDeploy","data","hexConcat","call","response","multicallInterface","multicall2Abi","decodeFunctionResult","returnData","OrderValidation","NonceManager","permitPost","currentWord","currentBitmap","Map","useNonce","_context","getNextOpenWord","word","_yield$this$getNextOp","bitPos","getFirstUnsetBit","bitmap","set","setBit","buildNonce","isUsed","nonce","_splitNonce","splitNonce","nonceBitmap","div","BigNumber","from","pow","mod","eq","_context3","constants","MaxUint256","add","mul","i","mask","KNOWN_ERRORS","8baa579f","InvalidSignature","1f6d5aef","Cancelled","302e5b7c","InvalidOrderFields","773a6187","4ddf4a64","70f65caa","Expired","ee3b3d4b","AlreadyFilled","TRANSFER_FROM_FAILED","InsufficientFunds","OrderQuoter","orderQuoterAddress","orderQuoter","quote","order","quoteBatch","orders","splitSignature","signature","v","r","s","serialize","results","getValidations","validations","quotes","success","input","console","log","validation","result","OK","startsWith","AbiCoder","decode","slice","keys","includes","UnknownError","checkTerminalStates","_context5","Promise","all","_context4","reactor","_this2","orderStatus","isFilled","nonceManager","maker","getSigner","OrderValidator","validate","validateBatch","stripHexPrefix","a","DUTCH_LIMIT_ORDER_ABI","join","DutchLimitOrder","parse","encoded","startTime","endTime","inputToken","inputAmount","deadline","toNumber","token","amount","startAmount","endAmount","recipient","encode","output","computeAddress","recoverPublicKey","permitData","sigType","Unordered","tokens","tokenType","ERC20","maxAmount","id","spender","witness","keccak256","OrderBuilder","orderInfo","Date","getTime","invariant","getOrderInfo","undefined","DutchLimitOrderBuilder","reactorAddress","push","_OrderBuilder","build","assign"],"mappings":"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"}