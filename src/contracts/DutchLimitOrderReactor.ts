/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type SignatureStruct = {
  v: PromiseOrValue<BigNumberish>;
  r: PromiseOrValue<BytesLike>;
  s: PromiseOrValue<BytesLike>;
};

export type SignatureStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export type SignedOrderStruct = {
  order: PromiseOrValue<BytesLike>;
  sig: SignatureStruct;
};

export type SignedOrderStructOutput = [string, SignatureStructOutput] & {
  order: string;
  sig: SignatureStructOutput;
};

export type OrderInfoStruct = {
  reactor: PromiseOrValue<string>;
  offerer: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  deadline: PromiseOrValue<BigNumberish>;
};

export type OrderInfoStructOutput = [string, string, BigNumber, BigNumber] & {
  reactor: string;
  offerer: string;
  nonce: BigNumber;
  deadline: BigNumber;
};

export type TokenAmountStruct = {
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
};

export type TokenAmountStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export type OutputStruct = {
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
};

export type OutputStructOutput = [string, BigNumber, string] & {
  token: string;
  amount: BigNumber;
  recipient: string;
};

export type ResolvedOrderStruct = {
  info: OrderInfoStruct;
  input: TokenAmountStruct;
  outputs: OutputStruct[];
};

export type ResolvedOrderStructOutput = [
  OrderInfoStructOutput,
  TokenAmountStructOutput,
  OutputStructOutput[]
] & {
  info: OrderInfoStructOutput;
  input: TokenAmountStructOutput;
  outputs: OutputStructOutput[];
};

export interface DutchLimitOrderReactorInterface extends utils.Interface {
  functions: {
    "execute((bytes,(uint8,bytes32,bytes32)),address,bytes)": FunctionFragment;
    "orderStatus(bytes32)": FunctionFragment;
    "permitPost()": FunctionFragment;
    "resolve(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "execute" | "orderStatus" | "permitPost" | "resolve"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [
      SignedOrderStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderStatus",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "permitPost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolve",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permitPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolve", data: BytesLike): Result;

  events: {
    "Fill(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Fill"): EventFragment;
}

export interface FillEventObject {
  orderHash: string;
  filler: string;
}
export type FillEvent = TypedEvent<[string, string], FillEventObject>;

export type FillEventFilter = TypedEventFilter<FillEvent>;

export interface DutchLimitOrderReactor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DutchLimitOrderReactorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execute(
      order: SignedOrderStruct,
      fillContract: PromiseOrValue<string>,
      fillData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isCancelled: boolean; isFilled: boolean }
    >;

    permitPost(overrides?: CallOverrides): Promise<[string]>;

    resolve(
      order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [ResolvedOrderStructOutput] & { resolvedOrder: ResolvedOrderStructOutput }
    >;
  };

  execute(
    order: SignedOrderStruct,
    fillContract: PromiseOrValue<string>,
    fillData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orderStatus(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { isCancelled: boolean; isFilled: boolean }>;

  permitPost(overrides?: CallOverrides): Promise<string>;

  resolve(
    order: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ResolvedOrderStructOutput>;

  callStatic: {
    execute(
      order: SignedOrderStruct,
      fillContract: PromiseOrValue<string>,
      fillData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    orderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isCancelled: boolean; isFilled: boolean }
    >;

    permitPost(overrides?: CallOverrides): Promise<string>;

    resolve(
      order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ResolvedOrderStructOutput>;
  };

  filters: {
    "Fill(bytes32,address)"(orderHash?: null, filler?: null): FillEventFilter;
    Fill(orderHash?: null, filler?: null): FillEventFilter;
  };

  estimateGas: {
    execute(
      order: SignedOrderStruct,
      fillContract: PromiseOrValue<string>,
      fillData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permitPost(overrides?: CallOverrides): Promise<BigNumber>;

    resolve(
      order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      order: SignedOrderStruct,
      fillContract: PromiseOrValue<string>,
      fillData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orderStatus(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permitPost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resolve(
      order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
