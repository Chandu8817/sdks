/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SwapRouter02Executor,
  SwapRouter02ExecutorInterface,
} from "../SwapRouter02Executor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_whitelistedCaller",
        type: "address",
      },
      {
        internalType: "contract IReactor",
        name: "_reactor",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "contract ISwapRouter02",
        name: "_swapRouter02",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "MsgSenderNotReactor",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeTransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20[]",
        name: "tokensToApprove",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "multicallData",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IReactor",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapper",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "contract IValidationCallback",
                name: "additionalValidationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "additionalValidationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract ERC20",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder[]",
        name: "resolvedOrders",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "fillData",
        type: "bytes",
      },
    ],
    name: "reactorCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "unwrapWETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b5060405162001a6538038062001a6583398101604081905262000035916200012b565b600080546001600160a01b0319166001600160a01b03841690811782556040518492907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0380851660a05283811660c05281166080819052604080516312a9293f60e21b81529051634aa4a4fc916004808201926020929091908290030181865afa158015620000d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fb919062000193565b6001600160a01b031660e05250620001ba92505050565b6001600160a01b03811681146200012857600080fd5b50565b600080600080608085870312156200014257600080fd5b84516200014f8162000112565b6020860151909450620001628162000112565b6040860151909350620001758162000112565b6060860151909250620001888162000112565b939692955090935050565b600060208284031215620001a657600080fd5b8151620001b38162000112565b9392505050565b60805160a05160c05160e05161185562000210600039600081816104dc015261058e015260006106250152600061067e015260008181610203015281816102d70152818161072501526107f401526118556000f3fe6080604052600436106100695760003560e01c80638da5cb5b116100435780638da5cb5b146100d75780639943fa891461012d578063f2fde38b1461014d57600080fd5b806363fb0b9614610075578063690d83201461009757806389a3f136146100b757600080fd5b3661007057005b600080fd5b34801561008157600080fd5b50610095610090366004610db4565b61016d565b005b3480156100a357600080fd5b506100956100b2366004610e42565b61039c565b3480156100c357600080fd5b506100956100d2366004610e42565b61042a565b3480156100e357600080fd5b506000546101049073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561013957600080fd5b50610095610148366004610e66565b61060d565b34801561015957600080fd5b50610095610168366004610e42565b610988565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60005b83811015610299576102877f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff87878581811061025557610255610f15565b905060200201602081019061026a9190610e42565b73ffffffffffffffffffffffffffffffffffffffff169190610a79565b8061029181610f44565b9150506101f6565b506040517f5ae401dc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635ae401dc90610330907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9086908690600401610fec565b6000604051808303816000875af115801561034f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103959190810190611227565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461041d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b6104278147610b4e565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610538573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055c9190611319565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156105e757600080fd5b505af11580156105fb573d6000803e3d6000fd5b505050506106098247610b4e565b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461067c576040517f933fe52f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610701576040517f8c6e5d7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806107108385018561140e565b9150915060005b82518110156107b6576107a47f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85848151811061077757610777610f15565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610a799092919063ffffffff16565b806107ae81610f44565b915050610717565b506040517f5ae401dc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635ae401dc9061084b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9085906004016114d0565b6000604051808303816000875af115801561086a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526108b09190810190611227565b5060005b8681101561097e5760008888838181106108d0576108d0610f15565b90506020028101906108e2919061158e565b6108eb90611771565b905060005b8160400151518110156109695760008260400151828151811061091557610915610f15565b6020026020010151905061095681604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610bc89092919063ffffffff16565b508061096181610f44565b9150506108f0565b5050808061097690610f44565b9150506108b4565b5050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a09576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610b48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c454400000000000000000000000000000000000060448201526064016101ea565b50505050565b600080600080600085875af1905080610bc3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016101ea565b505050565b73ffffffffffffffffffffffffffffffffffffffff8316610c7d5760008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610c3d576040519150601f19603f3d011682016040523d82523d6000602084013e610c42565b606091505b5050905080610b48576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bc373ffffffffffffffffffffffffffffffffffffffff8416838360006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610b48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016101ea565b60008083601f840112610d7a57600080fd5b50813567ffffffffffffffff811115610d9257600080fd5b6020830191508360208260051b8501011115610dad57600080fd5b9250929050565b60008060008060408587031215610dca57600080fd5b843567ffffffffffffffff80821115610de257600080fd5b610dee88838901610d68565b90965094506020870135915080821115610e0757600080fd5b50610e1487828801610d68565b95989497509550505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461042757600080fd5b600060208284031215610e5457600080fd5b8135610e5f81610e20565b9392505050565b600080600080600060608688031215610e7e57600080fd5b853567ffffffffffffffff80821115610e9657600080fd5b610ea289838a01610d68565b909750955060208801359150610eb782610e20565b90935060408701359080821115610ecd57600080fd5b818801915088601f830112610ee157600080fd5b813581811115610ef057600080fd5b896020828501011115610f0257600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f9c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60006040820185835260206040818501528185835260608501905060608660051b86010192508660005b878110156110c1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa087860301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18a360301811261107757600080fd5b8901848101903567ffffffffffffffff81111561109357600080fd5b8036038213156110a257600080fd5b6110ad878284610fa3565b965050509183019190830190600101611016565b509298975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611121576111216110cf565b60405290565b60405160a0810167ffffffffffffffff81118282101715611121576111216110cf565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611191576111916110cf565b604052919050565b600067ffffffffffffffff8211156111b3576111b36110cf565b5060051b60200190565b600067ffffffffffffffff8211156111d7576111d76110cf565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561121e578181015183820152602001611206565b50506000910152565b6000602080838503121561123a57600080fd5b825167ffffffffffffffff8082111561125257600080fd5b818501915085601f83011261126657600080fd5b815161127961127482611199565b61114a565b81815260059190911b8301840190848101908883111561129857600080fd5b8585015b8381101561130c578051858111156112b45760008081fd5b8601603f81018b136112c65760008081fd5b8781015160406112d8611274836111bd565b8281528d828486010111156112ed5760008081fd5b6112fc838c8301848701611203565b865250505091860191860161129c565b5098975050505050505050565b60006020828403121561132b57600080fd5b5051919050565b600082601f83011261134357600080fd5b8135611351611274826111bd565b81815284602083860101111561136657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261139457600080fd5b813560206113a461127483611199565b82815260059290921b840181019181810190868411156113c357600080fd5b8286015b8481101561140357803567ffffffffffffffff8111156113e75760008081fd5b6113f58986838b0101611332565b8452509183019183016113c7565b509695505050505050565b6000806040838503121561142157600080fd5b823567ffffffffffffffff8082111561143957600080fd5b818501915085601f83011261144d57600080fd5b8135602061145d61127483611199565b82815260059290921b8401810191818101908984111561147c57600080fd5b948201945b838610156114a357853561149481610e20565b82529482019490820190611481565b965050860135925050808211156114b957600080fd5b506114c685828601611383565b9150509250929050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015611580577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08887030184528151805180885261154381888a01898501611203565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016969096018501955092840192908401906001016114fe565b509398975050505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff218336030181126115c257600080fd5b9190910192915050565b600060c082840312156115de57600080fd5b60405160c0810167ffffffffffffffff8282108183111715611602576116026110cf565b816040528293508435915061161682610e20565b90825260208401359061162882610e20565b81602084015260408501356040840152606085013560608401526080850135915061165282610e20565b81608084015260a085013591508082111561166c57600080fd5b5061167985828601611332565b60a0830152505092915050565b60006060828403121561169857600080fd5b6116a06110fe565b905081356116ad81610e20565b80825250602082013560208201526040820135604082015292915050565b600082601f8301126116dc57600080fd5b813560206116ec61127483611199565b8281526060928302850182019282820191908785111561170b57600080fd5b8387015b858110156117645781818a0312156117275760008081fd5b61172f6110fe565b813561173a81610e20565b8152818601358682015260408083013561175381610e20565b90820152845292840192810161170f565b5090979650505050505050565b600060e0823603121561178357600080fd5b61178b611127565b823567ffffffffffffffff808211156117a357600080fd5b6117af368387016115cc565b83526117be3660208701611686565b602084015260808501359150808211156117d757600080fd5b6117e3368387016116cb565b604084015260a08501359150808211156117fc57600080fd5b5061180936828601611332565b60608301525060c092909201356080830152509056fea264697066735822122086466113e8060b7a840713717a2b14c7f044d0e49078af6ce4332b4604c5687a64736f6c63430008130033";

type SwapRouter02ExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouter02ExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouter02Executor__factory extends ContractFactory {
  constructor(...args: SwapRouter02ExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _whitelistedCaller: PromiseOrValue<string>,
    _reactor: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _swapRouter02: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouter02Executor> {
    return super.deploy(
      _whitelistedCaller,
      _reactor,
      _owner,
      _swapRouter02,
      overrides || {}
    ) as Promise<SwapRouter02Executor>;
  }
  override getDeployTransaction(
    _whitelistedCaller: PromiseOrValue<string>,
    _reactor: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _swapRouter02: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _whitelistedCaller,
      _reactor,
      _owner,
      _swapRouter02,
      overrides || {}
    );
  }
  override attach(address: string): SwapRouter02Executor {
    return super.attach(address) as SwapRouter02Executor;
  }
  override connect(signer: Signer): SwapRouter02Executor__factory {
    return super.connect(signer) as SwapRouter02Executor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouter02ExecutorInterface {
    return new utils.Interface(_abi) as SwapRouter02ExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouter02Executor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SwapRouter02Executor;
  }
}
