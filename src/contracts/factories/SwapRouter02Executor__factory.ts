/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SwapRouter02Executor,
  SwapRouter02ExecutorInterface,
} from "../SwapRouter02Executor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_whitelistedCaller",
        type: "address",
      },
      {
        internalType: "address",
        name: "_reactor",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_swapRouter02",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "EtherSendFail",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientWETHBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "MsgSenderNotReactor",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeTransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokensToApprove",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "multicallData",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "validationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "validationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder[]",
        name: "resolvedOrders",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "fillData",
        type: "bytes",
      },
    ],
    name: "reactorCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "unwrapWETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b5060405162001af038038062001af083398101604081905262000035916200012f565b600080546001600160a01b0319166001600160a01b03841690811782556040518492907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b0380851660a05283811660c05281166080819052604080516312a9293f60e21b81529051634aa4a4fc916004808201926020929091908290030181865afa158015620000d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fb91906200018c565b6001600160a01b031660e05250620001b192505050565b80516001600160a01b03811681146200012a57600080fd5b919050565b600080600080608085870312156200014657600080fd5b620001518562000112565b9350620001616020860162000112565b9250620001716040860162000112565b9150620001816060860162000112565b905092959194509250565b6000602082840312156200019f57600080fd5b620001aa8262000112565b9392505050565b60805160a05160c05160e0516118e962000207600039600081816106460152610731015260006107c80152600061082101526000818161035301528181610441015281816108c8015261099701526118e96000f3fe6080604052600436106100695760003560e01c806389a3f1361161004357806389a3f136146100d75780638da5cb5b146100f75780639943fa891461014d57600080fd5b806313af40351461007557806363fb0b9614610097578063690d8320146100b757600080fd5b3661007057005b600080fd5b34801561008157600080fd5b50610095610090366004610e17565b61016d565b005b3480156100a357600080fd5b506100956100b2366004610e85565b610263565b3480156100c357600080fd5b506100956100d2366004610e17565b610506565b3480156100e357600080fd5b506100956100f2366004610e17565b610594565b34801561010357600080fd5b506000546101249073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561015957600080fd5b50610095610168366004610ef1565b6107b0565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b60005b838110156104035784848281811061030157610301610f9f565b90506020020160208101906103169190610e17565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6024830152919091169063095ea7b3906044016020604051808303816000875af11580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f09190610fce565b50806103fb81610ff0565b9150506102e7565b506040517f5ae401dc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635ae401dc9061049a907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9086908690600401611098565b6000604051808303816000875af11580156104b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104ff91908101906112d3565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b6105918147610b2b565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c691906113c5565b905080600003610702576040517fea920f3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561078a57600080fd5b505af115801561079e573d6000803e3d6000fd5b505050506107ac8247610b2b565b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461081f576040517f933fe52f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108a4576040517f8c6e5d7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806108b3838501856114ba565b9150915060005b8251811015610959576109477f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85848151811061091a5761091a610f9f565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610ba59092919063ffffffff16565b8061095181610ff0565b9150506108ba565b506040517f5ae401dc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635ae401dc906109ee907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90859060040161157a565b6000604051808303816000875af1158015610a0d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a5391908101906112d3565b5060005b86811015610b21576000888883818110610a7357610a73610f9f565b9050602002810190610a859190611638565b610a8e90611805565b905060005b816040015151811015610b0c57600082604001518281518110610ab857610ab8610f9f565b60200260200101519050610af981604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610c649092919063ffffffff16565b5080610b0481610ff0565b915050610a93565b50508080610b1990610ff0565b915050610a57565b5050505050505050565b600080600080600085875af1905080610ba0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016101ea565b505050565b60006040517f095ea7b3000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610c5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c454400000000000000000000000000000000000060448201526064016101ea565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610d195760008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610cd9576040519150601f19603f3d011682016040523d82523d6000602084013e610cde565b606091505b5050905080610c5e576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ba073ffffffffffffffffffffffffffffffffffffffff8416838360006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610c5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016101ea565b803573ffffffffffffffffffffffffffffffffffffffff81168114610e1257600080fd5b919050565b600060208284031215610e2957600080fd5b610e3282610dee565b9392505050565b60008083601f840112610e4b57600080fd5b50813567ffffffffffffffff811115610e6357600080fd5b6020830191508360208260051b8501011115610e7e57600080fd5b9250929050565b60008060008060408587031215610e9b57600080fd5b843567ffffffffffffffff80821115610eb357600080fd5b610ebf88838901610e39565b90965094506020870135915080821115610ed857600080fd5b50610ee587828801610e39565b95989497509550505050565b600080600080600060608688031215610f0957600080fd5b853567ffffffffffffffff80821115610f2157600080fd5b610f2d89838a01610e39565b9097509550859150610f4160208901610dee565b94506040880135915080821115610f5757600080fd5b818801915088601f830112610f6b57600080fd5b813581811115610f7a57600080fd5b896020828501011115610f8c57600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610fe057600080fd5b81518015158114610e3257600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611048577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60006040820185835260206040818501528185835260608501905060608660051b86010192508660005b8781101561116d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa087860301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18a360301811261112357600080fd5b8901848101903567ffffffffffffffff81111561113f57600080fd5b80360382131561114e57600080fd5b61115987828461104f565b9650505091830191908301906001016110c2565b509298975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156111cd576111cd61117b565b60405290565b60405160a0810167ffffffffffffffff811182821017156111cd576111cd61117b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561123d5761123d61117b565b604052919050565b600067ffffffffffffffff82111561125f5761125f61117b565b5060051b60200190565b600067ffffffffffffffff8211156112835761128361117b565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110156112ca5781810151838201526020016112b2565b50506000910152565b600060208083850312156112e657600080fd5b825167ffffffffffffffff808211156112fe57600080fd5b818501915085601f83011261131257600080fd5b815161132561132082611245565b6111f6565b81815260059190911b8301840190848101908883111561134457600080fd5b8585015b838110156113b8578051858111156113605760008081fd5b8601603f81018b136113725760008081fd5b87810151604061138461132083611269565b8281528d828486010111156113995760008081fd5b6113a8838c83018487016112af565b8652505050918601918601611348565b5098975050505050505050565b6000602082840312156113d757600080fd5b5051919050565b600082601f8301126113ef57600080fd5b81356113fd61132082611269565b81815284602083860101111561141257600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261144057600080fd5b8135602061145061132083611245565b82815260059290921b8401810191818101908684111561146f57600080fd5b8286015b848110156114af57803567ffffffffffffffff8111156114935760008081fd5b6114a18986838b01016113de565b845250918301918301611473565b509695505050505050565b600080604083850312156114cd57600080fd5b823567ffffffffffffffff808211156114e557600080fd5b818501915085601f8301126114f957600080fd5b8135602061150961132083611245565b82815260059290921b8401810191818101908984111561152857600080fd5b948201945b8386101561154d5761153e86610dee565b8252948201949082019061152d565b9650508601359250508082111561156357600080fd5b506115708582860161142f565b9150509250929050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b8281101561162a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452815180518088526115ed81888a018985016112af565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016969096018501955092840192908401906001016115a8565b509398975050505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261166c57600080fd5b9190910192915050565b600060c0828403121561168857600080fd5b60405160c0810167ffffffffffffffff82821081831117156116ac576116ac61117b565b816040528293506116bc85610dee565b83526116ca60208601610dee565b602084015260408501356040840152606085013560608401526116ef60808601610dee565b608084015260a085013591508082111561170857600080fd5b50611715858286016113de565b60a0830152505092915050565b60006060828403121561173457600080fd5b61173c6111aa565b905061174782610dee565b8152602082013560208201526040820135604082015292915050565b600082601f83011261177457600080fd5b8135602061178461132083611245565b828152606092830285018201928282019190878511156117a357600080fd5b8387015b858110156117f85781818a0312156117bf5760008081fd5b6117c76111aa565b6117d082610dee565b8152858201358682015260406117e7818401610dee565b9082015284529284019281016117a7565b5090979650505050505050565b600060e0823603121561181757600080fd5b61181f6111d3565b823567ffffffffffffffff8082111561183757600080fd5b61184336838701611676565b83526118523660208701611722565b6020840152608085013591508082111561186b57600080fd5b61187736838701611763565b604084015260a085013591508082111561189057600080fd5b5061189d368286016113de565b60608301525060c092909201356080830152509056fea26469706673582212200c84cbcbe7fa9ef302a61958899c25b42b2a7da079995f2bd3613e54df5c9ad264736f6c63430008130033";

type SwapRouter02ExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouter02ExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouter02Executor__factory extends ContractFactory {
  constructor(...args: SwapRouter02ExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _whitelistedCaller: PromiseOrValue<string>,
    _reactor: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _swapRouter02: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouter02Executor> {
    return super.deploy(
      _whitelistedCaller,
      _reactor,
      _owner,
      _swapRouter02,
      overrides || {}
    ) as Promise<SwapRouter02Executor>;
  }
  override getDeployTransaction(
    _whitelistedCaller: PromiseOrValue<string>,
    _reactor: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _swapRouter02: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _whitelistedCaller,
      _reactor,
      _owner,
      _swapRouter02,
      overrides || {}
    );
  }
  override attach(address: string): SwapRouter02Executor {
    return super.attach(address) as SwapRouter02Executor;
  }
  override connect(signer: Signer): SwapRouter02Executor__factory {
    return super.connect(signer) as SwapRouter02Executor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouter02ExecutorInterface {
    return new utils.Interface(_abi) as SwapRouter02ExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouter02Executor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SwapRouter02Executor;
  }
}
