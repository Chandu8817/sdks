/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SwapRouter02Executor,
  SwapRouter02ExecutorInterface,
} from "../SwapRouter02Executor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_whitelistedCaller",
        type: "address",
      },
      {
        internalType: "address",
        name: "_reactor",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "contract ISwapRouter02",
        name: "_swapRouter02",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CallerNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "MsgSenderNotReactor",
    type: "error",
  },
  {
    inputs: [],
    name: "NativeTransferFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20[]",
        name: "tokensToApprove",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "multicallData",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IReactor",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapper",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "contract IValidationCallback",
                name: "validationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "validationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract ERC20",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder[]",
        name: "resolvedOrders",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "fillData",
        type: "bytes",
      },
    ],
    name: "reactorCallback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "unwrapWETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdrawETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b5060405162001ad438038062001ad483398101604081905262000035916200012b565b600080546001600160a01b0319166001600160a01b03841690811782556040518492907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b0380851660a05283811660c05281166080819052604080516312a9293f60e21b81529051634aa4a4fc916004808201926020929091908290030181865afa158015620000d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fb919062000193565b6001600160a01b031660e05250620001ba92505050565b6001600160a01b03811681146200012857600080fd5b50565b600080600080608085870312156200014257600080fd5b84516200014f8162000112565b6020860151909450620001628162000112565b6040860151909350620001758162000112565b6060860151909250620001888162000112565b939692955090935050565b600060208284031215620001a657600080fd5b8151620001b38162000112565b9392505050565b60805160a05160c05160e0516118c4620002106000396000818161064601526106f80152600061078f015260006107e8015260008181610353015281816104410152818161088f015261095e01526118c46000f3fe6080604052600436106100695760003560e01c806389a3f1361161004357806389a3f136146100d75780638da5cb5b146100f75780639943fa891461014d57600080fd5b806313af40351461007557806363fb0b9614610097578063690d8320146100b757600080fd5b3661007057005b600080fd5b34801561008157600080fd5b50610095610090366004610dd7565b61016d565b005b3480156100a357600080fd5b506100956100b2366004610e47565b610263565b3480156100c357600080fd5b506100956100d2366004610dd7565b610506565b3480156100e357600080fd5b506100956100f2366004610dd7565b610594565b34801561010357600080fd5b506000546101249073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561015957600080fd5b50610095610168366004610eb3565b610777565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b60005b838110156104035784848281811061030157610301610f62565b90506020020160208101906103169190610dd7565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6024830152919091169063095ea7b3906044016020604051808303816000875af11580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f09190610f91565b50806103fb81610fb3565b9150506102e7565b506040517f5ae401dc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635ae401dc9061049a907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908690869060040161105b565b6000604051808303816000875af11580156104b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104ff9190810190611296565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b6105918147610af2565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064016101ea565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611388565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561075157600080fd5b505af1158015610765573d6000803e3d6000fd5b505050506107738247610af2565b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146107e6576040517f933fe52f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461086b576040517f8c6e5d7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061087a8385018561147d565b9150915060005b82518110156109205761090e7f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8584815181106108e1576108e1610f62565b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610b6c9092919063ffffffff16565b8061091881610fb3565b915050610881565b506040517f5ae401dc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635ae401dc906109b5907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90859060040161153f565b6000604051808303816000875af11580156109d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a1a9190810190611296565b5060005b86811015610ae8576000888883818110610a3a57610a3a610f62565b9050602002810190610a4c91906115fd565b610a55906117e0565b905060005b816040015151811015610ad357600082604001518281518110610a7f57610a7f610f62565b60200260200101519050610ac081604001518260200151836000015173ffffffffffffffffffffffffffffffffffffffff16610c2b9092919063ffffffff16565b5080610acb81610fb3565b915050610a5a565b50508080610ae090610fb3565b915050610a1e565b5050505050505050565b600080600080600085875af1905080610b67576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016101ea565b505050565b60006040517f095ea7b3000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c454400000000000000000000000000000000000060448201526064016101ea565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610ce05760008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610ca0576040519150601f19603f3d011682016040523d82523d6000602084013e610ca5565b606091505b5050905080610c25576040517ff4b3b1bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b6773ffffffffffffffffffffffffffffffffffffffff8416838360006040517fa9059cbb000000000000000000000000000000000000000000000000000000008152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610c25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016101ea565b73ffffffffffffffffffffffffffffffffffffffff8116811461059157600080fd5b600060208284031215610de957600080fd5b8135610df481610db5565b9392505050565b60008083601f840112610e0d57600080fd5b50813567ffffffffffffffff811115610e2557600080fd5b6020830191508360208260051b8501011115610e4057600080fd5b9250929050565b60008060008060408587031215610e5d57600080fd5b843567ffffffffffffffff80821115610e7557600080fd5b610e8188838901610dfb565b90965094506020870135915080821115610e9a57600080fd5b50610ea787828801610dfb565b95989497509550505050565b600080600080600060608688031215610ecb57600080fd5b853567ffffffffffffffff80821115610ee357600080fd5b610eef89838a01610dfb565b909750955060208801359150610f0482610db5565b90935060408701359080821115610f1a57600080fd5b818801915088601f830112610f2e57600080fd5b813581811115610f3d57600080fd5b896020828501011115610f4f57600080fd5b9699959850939650602001949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215610fa357600080fd5b81518015158114610df457600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361100b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60006040820185835260206040818501528185835260608501905060608660051b86010192508660005b87811015611130577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa087860301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18a36030181126110e657600080fd5b8901848101903567ffffffffffffffff81111561110257600080fd5b80360382131561111157600080fd5b61111c878284611012565b965050509183019190830190600101611085565b509298975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156111905761119061113e565b60405290565b60405160a0810167ffffffffffffffff811182821017156111905761119061113e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156112005761120061113e565b604052919050565b600067ffffffffffffffff8211156112225761122261113e565b5060051b60200190565b600067ffffffffffffffff8211156112465761124661113e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b8381101561128d578181015183820152602001611275565b50506000910152565b600060208083850312156112a957600080fd5b825167ffffffffffffffff808211156112c157600080fd5b818501915085601f8301126112d557600080fd5b81516112e86112e382611208565b6111b9565b81815260059190911b8301840190848101908883111561130757600080fd5b8585015b8381101561137b578051858111156113235760008081fd5b8601603f81018b136113355760008081fd5b8781015160406113476112e38361122c565b8281528d8284860101111561135c5760008081fd5b61136b838c8301848701611272565b865250505091860191860161130b565b5098975050505050505050565b60006020828403121561139a57600080fd5b5051919050565b600082601f8301126113b257600080fd5b81356113c06112e38261122c565b8181528460208386010111156113d557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261140357600080fd5b813560206114136112e383611208565b82815260059290921b8401810191818101908684111561143257600080fd5b8286015b8481101561147257803567ffffffffffffffff8111156114565760008081fd5b6114648986838b01016113a1565b845250918301918301611436565b509695505050505050565b6000806040838503121561149057600080fd5b823567ffffffffffffffff808211156114a857600080fd5b818501915085601f8301126114bc57600080fd5b813560206114cc6112e383611208565b82815260059290921b840181019181810190898411156114eb57600080fd5b948201945b8386101561151257853561150381610db5565b825294820194908201906114f0565b9650508601359250508082111561152857600080fd5b50611535858286016113f2565b9150509250929050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b828110156115ef577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452815180518088526115b281888a01898501611272565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169690960185019550928401929084019060010161156d565b509398975050505050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261163157600080fd5b9190910192915050565b600060c0828403121561164d57600080fd5b60405160c0810167ffffffffffffffff82821081831117156116715761167161113e565b816040528293508435915061168582610db5565b90825260208401359061169782610db5565b8160208401526040850135604084015260608501356060840152608085013591506116c182610db5565b81608084015260a08501359150808211156116db57600080fd5b506116e8858286016113a1565b60a0830152505092915050565b60006060828403121561170757600080fd5b61170f61116d565b9050813561171c81610db5565b80825250602082013560208201526040820135604082015292915050565b600082601f83011261174b57600080fd5b8135602061175b6112e383611208565b8281526060928302850182019282820191908785111561177a57600080fd5b8387015b858110156117d35781818a0312156117965760008081fd5b61179e61116d565b81356117a981610db5565b815281860135868201526040808301356117c281610db5565b90820152845292840192810161177e565b5090979650505050505050565b600060e082360312156117f257600080fd5b6117fa611196565b823567ffffffffffffffff8082111561181257600080fd5b61181e3683870161163b565b835261182d36602087016116f5565b6020840152608085013591508082111561184657600080fd5b6118523683870161173a565b604084015260a085013591508082111561186b57600080fd5b50611878368286016113a1565b60608301525060c092909201356080830152509056fea264697066735822122086b50617b7e5bf961a89d61bcccdba862598bf09c122d0f8e10c98f2f278049d64736f6c63430008130033";

type SwapRouter02ExecutorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapRouter02ExecutorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapRouter02Executor__factory extends ContractFactory {
  constructor(...args: SwapRouter02ExecutorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _whitelistedCaller: PromiseOrValue<string>,
    _reactor: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _swapRouter02: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapRouter02Executor> {
    return super.deploy(
      _whitelistedCaller,
      _reactor,
      _owner,
      _swapRouter02,
      overrides || {}
    ) as Promise<SwapRouter02Executor>;
  }
  override getDeployTransaction(
    _whitelistedCaller: PromiseOrValue<string>,
    _reactor: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _swapRouter02: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _whitelistedCaller,
      _reactor,
      _owner,
      _swapRouter02,
      overrides || {}
    );
  }
  override attach(address: string): SwapRouter02Executor {
    return super.attach(address) as SwapRouter02Executor;
  }
  override connect(signer: Signer): SwapRouter02Executor__factory {
    return super.connect(signer) as SwapRouter02Executor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapRouter02ExecutorInterface {
    return new utils.Interface(_abi) as SwapRouter02ExecutorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapRouter02Executor {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SwapRouter02Executor;
  }
}
