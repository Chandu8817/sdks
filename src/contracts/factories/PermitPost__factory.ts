/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { PermitPost, PermitPostInterface } from "../PermitPost";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidId",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "NonceUsed",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSpender",
    type: "error",
  },
  {
    inputs: [],
    name: "_PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_TOKEN_DETAILS_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "bitmapPositions",
    outputs: [
      {
        internalType: "uint248",
        name: "wordPos",
        type: "uint248",
      },
      {
        internalType: "uint8",
        name: "bitPos",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "isUsedUnorderedNonce",
    outputs: [
      {
        internalType: "bool",
        name: "used",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint248",
        name: "",
        type: "uint248",
      },
    ],
    name: "nonceBitmap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "enum TokenType",
                name: "tokenType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
            ],
            internalType: "struct TokenDetails[]",
            name: "tokens",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "witness",
            type: "bytes32",
          },
        ],
        internalType: "struct Permit",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "to",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct Signature",
        name: "sig",
        type: "tuple",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "enum TokenType",
                name: "tokenType",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
            ],
            internalType: "struct TokenDetails[]",
            name: "tokens",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "spender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "witness",
            type: "bytes32",
          },
        ],
        internalType: "struct Permit",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "to",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct Signature",
        name: "sig",
        type: "tuple",
      },
    ],
    name: "unorderedTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x61014060405234801561001157600080fd5b50604080518082018252600a81526914195c9b5a5d141bdcdd60b21b6020808301918252835180850190945260018452603160f81b908401528151902060e08190527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100f18184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061010692505050565b60805160a05160c05160e05161010051610120516113856101556000396000610ad701526000610b2601526000610b0101526000610a5a01526000610a8401526000610aae01526113856000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063982aaf6b1161005b578063982aaf6b14610161578063a44ba4ef14610188578063b2a2ee67146101c5578063b6f0d88f146101da57600080fd5b80631e459b981461008d57806364eb3184146100e45780636a9009ae146101195780637ecebe0014610141575b600080fd5b6100cf61009b366004610e36565b6001600160a01b0391909116600090815260208181526040808320600885901c845290915290205460ff9091161c60011690565b60405190151581526020015b60405180910390f35b61010b7f15d73fd3389658d5d3b3e32a847b53c30a229bdcd21f7078cde26cc4d0d3f1cc81565b6040519081526020016100db565b61010b610127366004610e60565b600060208181529281526040808220909352908152205481565b61010b61014f366004610ea3565b60016020526000908152604090205481565b61010b7f0eb37ebaa42bd9140c20b84947b8f4faa6c3bb28b233e2f3acd91fec0317fe2681565b6101a4610196366004610ec5565b600881901c9160ff90911690565b604080516001600160f81b03909316835260ff9091166020830152016100db565b6101d86101d3366004610f54565b6101ed565b005b6101d86101e8366004611035565b610302565b6101fa8984848888610462565b61022f898260018b61022a8d6001600160a01b031660009081526001602081905260409091208054918201905590565b6105d4565b60005b61023c8a8061111f565b90508110156102f65760006102518b8061111f565b8381811061026157610261611169565b9050608002018036038101906102779190611195565b90506102e5816000015182602001518c8c8c8781811061029957610299611169565b90506020020160208101906102ae9190610ea3565b8b8b888181106102c0576102c0611169565b905060200201358a8a898181106102d9576102d9611169565b905060200201356107a1565b506102ef8161121b565b9050610232565b50505050505050505050565b61030f8a85858989610462565b6001600160a01b038916600090815260208181526040808320600886901c845290915290205460ff83161c6001161561035b57604051631f6d5aef60e01b815260040160405180910390fd5b6001600160a01b038916600090815260208181526040808320600886901c845290915290208054600160ff85161b17905561039a8a8260008c866105d4565b60005b6103a78b8061111f565b90508110156104555760006103bc8c8061111f565b838181106103cc576103cc611169565b9050608002018036038101906103e29190611195565b9050610444816000015182602001518d8d8d8781811061040457610404611169565b90506020020160208101906104199190610ea3565b8c8c8881811061042b5761042b611169565b905060200201358b8b898181106102d9576102d9611169565b5061044e8161121b565b905061039d565b5050505050505050505050565b6104726040860160208701610ea3565b6001600160a01b0316336001600160a01b0316146104a35760405163e79dd39160e01b815260040160405180910390fd5b84604001354211156104c85760405163387b2e5560e11b815260040160405180910390fd5b60005b6104d5868061111f565b905081101561054a576104e8868061111f565b828181106104f8576104f8611169565b9050608002016040013585858381811061051457610514611169565b90506020020135111561053a5760405163162908e360e11b815260040160405180910390fd5b6105438161121b565b90506104cb565b5060005b610558868061111f565b90508110156105cc5761056b868061111f565b8281811061057b5761057b611169565b9050608002016060013583838381811061059757610597611169565b90506020020135146105bc57604051631bf4348160e31b815260040160405180910390fd5b6105c58161121b565b905061054e565b505050505050565b60006105e0868061111f565b905067ffffffffffffffff8111156105fa576105fa61117f565b604051908082528060200260200182016040528015610623578160200160208202803683370190505b50905060005b610633878061111f565b90508110156106a157610674610649888061111f565b8381811061065957610659611169565b90506080020180360381019061066f9190611195565b6108f0565b82828151811061068657610686611169565b602090810291909101015261069a8161121b565b9050610629565b50600061073f7f0eb37ebaa42bd9140c20b84947b8f4faa6c3bb28b233e2f3acd91fec0317fe2686846040516020016106da9190611242565b604051602081830303815290604052805190602001208a60200160208101906107039190610ea3565b8b604001358c6060013589604051602001610724979695949392919061128e565b60405160208183030381529060405280519060200120610942565b905060006107638261075460208a018a6112de565b89602001358a60400135610996565b9050846001600160a01b0316816001600160a01b03161461079757604051638baa579f60e01b815260040160405180910390fd5b5050505050505050565b60008660028111156107b5576107b5611278565b036107d4576107cf6001600160a01b0386168585846109be565b6105cc565b60018660028111156107e8576107e8611278565b0361085c576040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd90606401600060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b505050506105cc565b600286600281111561087057610870611278565b036105cc57604051637921219560e11b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260a06084830152600060a483015286169063f242432a9060c401600060405180830381600087803b1580156108dc57600080fd5b505af11580156102f6573d6000803e3d6000fd5b60007f15d73fd3389658d5d3b3e32a847b53c30a229bdcd21f7078cde26cc4d0d3f1cc82604051602001610925929190611301565b604051602081830303815290604052805190602001209050919050565b600061099061094f610a4d565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006109a787878787610b74565b915091506109b481610c61565b5095945050505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a465760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064015b60405180910390fd5b5050505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610aa657507f000000000000000000000000000000000000000000000000000000000000000046145b15610ad057507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610bab5750600090506003610c58565b8460ff16601b14158015610bc357508460ff16601c14155b15610bd45750600090506004610c58565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610c28573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c5157600060019250925050610c58565b9150600090505b94509492505050565b6000816004811115610c7557610c75611278565b03610c7d5750565b6001816004811115610c9157610c91611278565b03610cde5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a3d565b6002816004811115610cf257610cf2611278565b03610d3f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a3d565b6003816004811115610d5357610d53611278565b03610dab5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610a3d565b6004816004811115610dbf57610dbf611278565b03610e175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610a3d565b50565b80356001600160a01b0381168114610e3157600080fd5b919050565b60008060408385031215610e4957600080fd5b610e5283610e1a565b946020939093013593505050565b60008060408385031215610e7357600080fd5b610e7c83610e1a565b915060208301356001600160f81b0381168114610e9857600080fd5b809150509250929050565b600060208284031215610eb557600080fd5b610ebe82610e1a565b9392505050565b600060208284031215610ed757600080fd5b5035919050565b600060808284031215610ef057600080fd5b50919050565b60008083601f840112610f0857600080fd5b50813567ffffffffffffffff811115610f2057600080fd5b6020830191508360208260051b8501011115610f3b57600080fd5b9250929050565b600060608284031215610ef057600080fd5b60008060008060008060008060006101008a8c031215610f7357600080fd5b893567ffffffffffffffff80821115610f8b57600080fd5b610f978d838e01610ede565b9a50610fa560208d01610e1a565b995060408c0135915080821115610fbb57600080fd5b610fc78d838e01610ef6565b909950975060608c0135915080821115610fe057600080fd5b610fec8d838e01610ef6565b909750955060808c013591508082111561100557600080fd5b506110128c828d01610ef6565b909450925061102690508b60a08c01610f42565b90509295985092959850929598565b6000806000806000806000806000806101208b8d03121561105557600080fd5b8a3567ffffffffffffffff8082111561106d57600080fd5b6110798e838f01610ede565b9b5061108760208e01610e1a565b9a5060408d013591508082111561109d57600080fd5b6110a98e838f01610ef6565b909a50985060608d01359150808211156110c257600080fd5b6110ce8e838f01610ef6565b909850965060808d01359150808211156110e757600080fd5b506110f48d828e01610ef6565b90955093505060a08b0135915061110e8c60c08d01610f42565b90509295989b9194979a5092959850565b6000808335601e1984360301811261113657600080fd5b83018035915067ffffffffffffffff82111561115157600080fd5b6020019150600781901b3603821315610f3b57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000608082840312156111a757600080fd5b6040516080810181811067ffffffffffffffff821117156111d857634e487b7160e01b600052604160045260246000fd5b6040528235600381106111ea57600080fd5b81526111f860208401610e1a565b602082015260408301356040820152606083013560608201528091505092915050565b60006001820161123b57634e487b7160e01b600052601160045260246000fd5b5060010190565b815160009082906020808601845b8381101561126c57815185529382019390820190600101611250565b50929695505050505050565b634e487b7160e01b600052602160045260246000fd5b87815260e08101600288106112a5576112a5611278565b602082019790975260408101959095526001600160a01b03939093166060850152608084019190915260a083015260c090910152919050565b6000602082840312156112f057600080fd5b813560ff81168114610ebe57600080fd5b828152815160a08201906003811061131b5761131b611278565b8060208401525060018060a01b0360208401511660408301526040830151606083015260608301516080830152939250505056fea2646970667358221220fb405a1e9735663c5451b85daa2cea33ed20738aa227cd989a71c4985ae2f93e64736f6c63430008100033";

type PermitPostConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermitPostConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PermitPost__factory extends ContractFactory {
  constructor(...args: PermitPostConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PermitPost> {
    return super.deploy(overrides || {}) as Promise<PermitPost>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PermitPost {
    return super.attach(address) as PermitPost;
  }
  override connect(signer: Signer): PermitPost__factory {
    return super.connect(signer) as PermitPost__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermitPostInterface {
    return new utils.Interface(_abi) as PermitPostInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PermitPost {
    return new Contract(address, _abi, signerOrProvider) as PermitPost;
  }
}
