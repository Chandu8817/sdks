/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ExclusiveFillerValidation,
  ExclusiveFillerValidationInterface,
} from "../ExclusiveFillerValidation";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "validationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "validationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder",
        name: "resolvedOrder",
        type: "tuple",
      },
    ],
    name: "validate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061024e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636e84ba2b14610030575b600080fd5b61004361003e3660046100eb565b610057565b604051901515815260200160405180910390f35b600080806100658480610142565b6100739060a0810190610180565b81019061008091906101ec565b91509150428110806100bd57508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146100e857600080fd5b50565b600080604083850312156100fe57600080fd5b8235610109816100c6565b9150602083013567ffffffffffffffff81111561012557600080fd5b830160e0818603121561013757600080fd5b809150509250929050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261017657600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126101b557600080fd5b83018035915067ffffffffffffffff8211156101d057600080fd5b6020019150368190038213156101e557600080fd5b9250929050565b600080604083850312156101ff57600080fd5b823561020a816100c6565b94602093909301359350505056fea26469706673582212204ae87741ad4ea41528966909537dbd547cf5569211ee6c340523bf183e716caa64736f6c63430008130033";

type ExclusiveFillerValidationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExclusiveFillerValidationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExclusiveFillerValidation__factory extends ContractFactory {
  constructor(...args: ExclusiveFillerValidationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExclusiveFillerValidation> {
    return super.deploy(overrides || {}) as Promise<ExclusiveFillerValidation>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ExclusiveFillerValidation {
    return super.attach(address) as ExclusiveFillerValidation;
  }
  override connect(signer: Signer): ExclusiveFillerValidation__factory {
    return super.connect(signer) as ExclusiveFillerValidation__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExclusiveFillerValidationInterface {
    return new utils.Interface(_abi) as ExclusiveFillerValidationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExclusiveFillerValidation {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ExclusiveFillerValidation;
  }
}
