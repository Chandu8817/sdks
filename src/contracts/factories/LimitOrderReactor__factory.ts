/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  LimitOrderReactor,
  LimitOrderReactorInterface,
} from "../LimitOrderReactor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_permitPost",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidReactor",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderAlreadyFilled",
    type: "error",
  },
  {
    inputs: [],
    name: "OrderCancelled",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "filler",
        type: "address",
      },
    ],
    name: "Fill",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "order",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct Signature",
            name: "sig",
            type: "tuple",
          },
        ],
        internalType: "struct SignedOrder",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "fillContract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "fillData",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "orderStatus",
    outputs: [
      {
        internalType: "bool",
        name: "isCancelled",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "isFilled",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "permitPost",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "order",
        type: "bytes",
      },
    ],
    name: "resolve",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct TokenAmount",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct Output[]",
            name: "outputs",
            type: "tuple[]",
          },
        ],
        internalType: "struct ResolvedOrder",
        name: "resolvedOrder",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610f6a380380610f6a83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051610ed96100916000396000818160d301526105a60152610ed96000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632dff692d146100515780638bcaadbd14610099578063e4056186146100ae578063f45d6b23146100ce575b600080fd5b61007d61005f366004610716565b60006020819052908152604090205460ff8082169161010090041682565b6040805192151583529015156020830152015b60405180910390f35b6100ac6100a7366004610794565b61010d565b005b6100c16100bc366004610814565b61014f565b604051610090919061090a565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610090565b61014961011d6100bc8680610924565b6020860161012b8780610924565b60405161013992919061096b565b604051809103902086868661018d565b50505050565b6101576106c5565b600061016583850185610b21565b6040805160608101825282518152602080840151908201529181015190820152949350505050565b855161019890610379565b6101a1846103cb565b6101ad8685858861045f565b604080516001808252818301909252600091816020015b6101cc6106c5565b8152602001906001900390816101c457905050905086816000815181106101f5576101f5610bf4565b6020908102919091010152604051635f0b7d5560e01b81526001600160a01b03851690635f0b7d559061023090849087908790600401610c0a565b600060405180830381600087803b15801561024a57600080fd5b505af115801561025e573d6000803e3d6000fd5b5050505060005b8760400151518110156103375760008860400151828151811061028a5761028a610bf4565b60209081029190910181015180516040808301519383015190516323b872dd60e01b81526001600160a01b038b811660048301529485166024820152604481019190915291935091909116906323b872dd906064016020604051808303816000875af11580156102fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103229190610c94565b5050808061032f90610cb6565b915050610265565b50604080518681523360208201527fba7599121d7877246723714eb403e13928cdbebe980abf7c630c0f9bef83fce1910160405180910390a150505050505050565b80516001600160a01b031630146103a357604051631377d29960e21b815260040160405180910390fd5b80606001514211156103c85760405163387b2e5560e11b815260040160405180910390fd5b50565b6000818152602081815260409182902082518084019093525460ff80821615801585526101009092041615159183019190915261041e576040516001622a81af60e21b0319815260040160405180910390fd5b8060200151156104415760405163ee3b3d4b60e01b815260040160405180910390fd5b506000908152602081905260409020805461ff001916610100179055565b60006040518060800160405280610479876020015161061f565b815230602082015286516060908101516040830152018590529050600060016040519080825280602002602001820160405280156104c1578160200160208202803683370190505b50905083816000815181106104d8576104d8610bf4565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061052a5761052a610bf4565b60209081029190910101526040805160018082528183019092526000918160200160208202803683370190505090508760200151602001518160008151811061057557610575610bf4565b602090810291909101810191909152885190810151604091820151915163b6f0d88f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263b6f0d88f926105e39289928991899189918e90600401610d7b565b600060405180830381600087803b1580156105fd57600080fd5b505af1158015610611573d6000803e3d6000fd5b505050505050505050505050565b604080516001808252818301909252606091816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610636579050506040805160808101909152909150806000815260200183600001516001600160a01b03168152602001836020015181526020016000815250816000815181106106b5576106b5610bf4565b6020026020010181905250919050565b6040805160e0810182526000606082018181526080830182905260a0830182905260c08301829052825282518084019093528083526020838101919091529091908201908152602001606081525090565b60006020828403121561072857600080fd5b5035919050565b80356001600160a01b038116811461074657600080fd5b919050565b60008083601f84011261075d57600080fd5b50813567ffffffffffffffff81111561077557600080fd5b60208301915083602082850101111561078d57600080fd5b9250929050565b600080600080606085870312156107aa57600080fd5b843567ffffffffffffffff808211156107c257600080fd5b90860190608082890312156107d657600080fd5b8195506107e56020880161072f565b945060408701359150808211156107fb57600080fd5b506108088782880161074b565b95989497509550505050565b6000806020838503121561082757600080fd5b823567ffffffffffffffff81111561083e57600080fd5b61084a8582860161074b565b90969095509350505050565b805180516001600160a01b03908116845260208083015182168186015260408084015181870152606093840151848701528185015180518416608088015282015160a08701528085015160e060c0880181905281519088018190526000959184019486949093909290916101008a01905b808710156108fc57875180518716835285810151868401528401518616848301529684019660019690960195908201906108c7565b509998505050505050505050565b60208152600061091d6020830184610856565b9392505050565b6000808335601e1984360301811261093b57600080fd5b83018035915067ffffffffffffffff82111561095657600080fd5b60200191503681900382131561078d57600080fd5b8183823760009101908152919050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156109b4576109b461097b565b60405290565b6040516080810167ffffffffffffffff811182821017156109b4576109b461097b565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a0657610a0661097b565b604052919050565b600060408284031215610a2057600080fd5b6040516040810181811067ffffffffffffffff82111715610a4357610a4361097b565b604052905080610a528361072f565b8152602083013560208201525092915050565b600082601f830112610a7657600080fd5b8135602067ffffffffffffffff821115610a9257610a9261097b565b610aa0818360051b016109dd565b82815260609283028501820192828201919087851115610abf57600080fd5b8387015b85811015610b145781818a031215610adb5760008081fd5b610ae3610991565b610aec8261072f565b815285820135868201526040610b0381840161072f565b908201528452928401928101610ac3565b5090979650505050505050565b600060208284031215610b3357600080fd5b813567ffffffffffffffff80821115610b4b57600080fd5b9083019081850360e0811215610b6057600080fd5b610b68610991565b6080821215610b7657600080fd5b610b7e6109ba565b9150610b898461072f565b8252610b976020850161072f565b60208301526040840135604083015260608401356060830152818152610bc08760808601610a0e565b602082015260c0840135915082821115610bd957600080fd5b610be587838601610a65565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b6000604082016040835280865180835260608501915060608160051b8601019250602080890160005b83811015610c6157605f19888703018552610c4f868351610856565b95509382019390820190600101610c33565b5050858403818701528684528688828601376000848801820152601f909601601f19169092019094019695505050505050565b600060208284031215610ca657600080fd5b8151801515811461091d57600080fd5b600060018201610cd657634e487b7160e01b600052601160045260246000fd5b5060010190565b600081518084526020808501945080840160005b83811015610d165781516001600160a01b031687529582019590820190600101610cf1565b509495945050505050565b600081518084526020808501945080840160005b83811015610d1657815187529582019590820190600101610d35565b803560ff8116808214610d6357600080fd5b83525060208181013590830152604090810135910152565b6101208082528851608091830182905280516101a084018190526000926101c0850192602092908301919085805b82811015610e08578451805160038110610dd157634e487b7160e01b84526021600452602484fd5b8852808701516001600160a01b03168789015260408082015190890152606090810151908801529583019593850193600101610da9565b5050508c8301516001600160a01b038116610140880152915060408d015161016087015260608d01516101808701526001600160a01b038c16838701528584036040870152610e57848c610cdd565b93508584036060870152610e6b848b610d21565b935085840381870152505050610e818187610d21565b9150508360a0830152610e9760c0830184610d51565b9897505050505050505056fea264697066735822122062c23c5bc0789e6c56a0d293599604be545462cda59aa8d6c8622ba76f6ead3764736f6c63430008100033";

type LimitOrderReactorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LimitOrderReactorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LimitOrderReactor__factory extends ContractFactory {
  constructor(...args: LimitOrderReactorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _permitPost: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LimitOrderReactor> {
    return super.deploy(
      _permitPost,
      overrides || {}
    ) as Promise<LimitOrderReactor>;
  }
  override getDeployTransaction(
    _permitPost: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_permitPost, overrides || {});
  }
  override attach(address: string): LimitOrderReactor {
    return super.attach(address) as LimitOrderReactor;
  }
  override connect(signer: Signer): LimitOrderReactor__factory {
    return super.connect(signer) as LimitOrderReactor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LimitOrderReactorInterface {
    return new utils.Interface(_abi) as LimitOrderReactorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LimitOrderReactor {
    return new Contract(address, _abi, signerOrProvider) as LimitOrderReactor;
  }
}
