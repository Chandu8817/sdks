/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { OrderQuoter, OrderQuoterInterface } from "../OrderQuoter";

const _abi = [
  {
    inputs: [],
    name: "OrdersLengthIncorrect",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "order",
        type: "bytes",
      },
    ],
    name: "getReactor",
    outputs: [
      {
        internalType: "contract IReactor",
        name: "reactor",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "order",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "quote",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IReactor",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapper",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "contract IValidationCallback",
                name: "validationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "validationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract ERC20",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "contract IReactor",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "swapper",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "contract IValidationCallback",
                name: "validationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "validationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "contract ERC20",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder[]",
        name: "resolvedOrders",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "reactorCallback",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e72806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806341d88d69146100465780637671d07b1461006f5780639943fa89146100b0575b600080fd5b6100596100543660046104e2565b6100c5565b604051610066919061061e565b60405180910390f35b61008b61007d366004610748565b604081810151909101015190565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610066565b6100c36100be36600461095b565b610221565b005b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528401529282018390528282019290925260808101919091526040838101518401810151815180830183528581526020808201869052835190810184526000815292517f05afc97700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216926305afc977926101af92913091600401610afb565b600060405180830381600087803b1580156101c957600080fd5b505af19250505080156101da575060015b61021b573d808015610208576040519150601f19603f3d011682016040523d82523d6000602084013e61020d565b606091505b50610217816102c4565b9150505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8216301461024357600080fd5b825160011461027e576040517f06ee987800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008360008151811061029357610293610b8d565b60200260200101516040516020016102ab919061061e565b6040516020818303038152906040529050805181602001fd5b6040805161016081018252600060a0820181815260c080840183905260e08401839052610100840183905261012084018390526060610140850181905291845284518083018652838152602080820185905281870185905285015293830181905280830152608082015282519091111561034057815182602001fd5b8180602001905181019061021b9190610d6a565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156103ab576103ab610359565b60405290565b6040516060810167ffffffffffffffff811182821017156103ab576103ab610359565b60405160a0810167ffffffffffffffff811182821017156103ab576103ab610359565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561043e5761043e610359565b604052919050565b600067ffffffffffffffff82111561046057610460610359565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261049d57600080fd5b81356104b06104ab82610446565b6103f7565b8181528460208386010111156104c557600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156104f557600080fd5b823567ffffffffffffffff8082111561050d57600080fd5b6105198683870161048c565b9350602085013591508082111561052f57600080fd5b5061053c8582860161048c565b9150509250929050565b60005b83811015610561578181015183820152602001610549565b50506000910152565b60008151808452610582816020860160208601610546565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501945080840160005b83811015610613578151805173ffffffffffffffffffffffffffffffffffffffff908116895284820151858a01526040918201511690880152606090960195908201906001016105c8565b509495945050505050565b602081526000825160e0602084015273ffffffffffffffffffffffffffffffffffffffff808251166101008501528060208301511661012085015260408201516101408501526060820151610160850152806080830151166101808501525060a0810151905060c06101a084015261069a6101c084018261056a565b905060208401516106d86040850182805173ffffffffffffffffffffffffffffffffffffffff16825260208082015190830152604090810151910152565b5060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808584030160a086015261071383836105b4565b925060608601519150808584030160c086015250610731828261056a565b915050608084015160e08401528091505092915050565b60006020828403121561075a57600080fd5b813567ffffffffffffffff81111561077157600080fd5b61077d8482850161048c565b949350505050565b600067ffffffffffffffff82111561079f5761079f610359565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff811681146107cb57600080fd5b50565b8035610354816107a9565b600060c082840312156107eb57600080fd5b6107f3610388565b90508135610800816107a9565b81526020820135610810816107a9565b8060208301525060408201356040820152606082013560608201526080820135610839816107a9565b608082015260a082013567ffffffffffffffff81111561085857600080fd5b6108648482850161048c565b60a08301525092915050565b60006060828403121561088257600080fd5b61088a6103b1565b90508135610897816107a9565b80825250602082013560208201526040820135604082015292915050565b600082601f8301126108c657600080fd5b813560206108d66104ab83610785565b828152606092830285018201928282019190878511156108f557600080fd5b8387015b8581101561094e5781818a0312156109115760008081fd5b6109196103b1565b8135610924816107a9565b8152818601358682015260408083013561093d816107a9565b9082015284529284019281016108f9565b5090979650505050505050565b60008060006060848603121561097057600080fd5b833567ffffffffffffffff8082111561098857600080fd5b818601915086601f83011261099c57600080fd5b813560206109ac6104ab83610785565b82815260059290921b8401810191818101908a8411156109cb57600080fd5b8286015b84811015610abc578035868111156109e657600080fd5b870160e0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215610a1a57600080fd5b610a226103d4565b8582013588811115610a3357600080fd5b610a418f88838601016107d9565b825250610a518e60408401610870565b8682015260a082013588811115610a685760008081fd5b610a768f88838601016108b5565b60408301525060c082013588811115610a8f5760008081fd5b610a9d8f888386010161048c565b60608301525060e09190910135608082015283529183019183016109cf565b509750610acc90508882016107ce565b955050506040860135915080821115610ae457600080fd5b50610af18682870161048c565b9150509250925092565b606081526000845160406060840152610b1760a084018261056a565b905060208601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0848303016080850152610b52828261056a565b91505073ffffffffffffffffffffffffffffffffffffffff851660208401528281036040840152610b83818561056a565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082601f830112610bcd57600080fd5b8151610bdb6104ab82610446565b818152846020838601011115610bf057600080fd5b61077d826020830160208701610546565b600060c08284031215610c1357600080fd5b610c1b610388565b90508151610c28816107a9565b81526020820151610c38816107a9565b8060208301525060408201516040820152606082015160608201526080820151610c61816107a9565b608082015260a082015167ffffffffffffffff811115610c8057600080fd5b61086484828501610bbc565b600060608284031215610c9e57600080fd5b610ca66103b1565b90508151610cb3816107a9565b80825250602082015160208201526040820151604082015292915050565b600082601f830112610ce257600080fd5b81516020610cf26104ab83610785565b82815260609283028501820192828201919087851115610d1157600080fd5b8387015b8581101561094e5781818a031215610d2d5760008081fd5b610d356103b1565b8151610d40816107a9565b81528186015186820152604080830151610d59816107a9565b908201528452928401928101610d15565b600060208284031215610d7c57600080fd5b815167ffffffffffffffff80821115610d9457600080fd5b9083019060e08286031215610da857600080fd5b610db06103d4565b825182811115610dbf57600080fd5b610dcb87828601610c01565b825250610ddb8660208501610c8c565b6020820152608083015182811115610df257600080fd5b610dfe87828601610cd1565b60408301525060a083015182811115610e1657600080fd5b610e2287828601610bbc565b60608301525060c09290920151608083015250939250505056fea2646970667358221220b0117c147fef2725a54fb3df443229b9ac32ed5984df4af223e4891e4ac10b0164736f6c63430008130033";

type OrderQuoterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OrderQuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OrderQuoter__factory extends ContractFactory {
  constructor(...args: OrderQuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OrderQuoter> {
    return super.deploy(overrides || {}) as Promise<OrderQuoter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OrderQuoter {
    return super.attach(address) as OrderQuoter;
  }
  override connect(signer: Signer): OrderQuoter__factory {
    return super.connect(signer) as OrderQuoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OrderQuoterInterface {
    return new utils.Interface(_abi) as OrderQuoterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OrderQuoter {
    return new Contract(address, _abi, signerOrProvider) as OrderQuoter;
  }
}
