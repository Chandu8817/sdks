/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { OrderQuoter, OrderQuoterInterface } from "../OrderQuoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "order",
        type: "bytes",
      },
    ],
    name: "getReactor",
    outputs: [
      {
        internalType: "address",
        name: "reactor",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "order",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "quote",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "validationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "validationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "bool",
                name: "isFeeOutput",
                type: "bool",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder",
        name: "result",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "reactor",
                type: "address",
              },
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "deadline",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "validationContract",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "validationData",
                type: "bytes",
              },
            ],
            internalType: "struct OrderInfo",
            name: "info",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "maxAmount",
                type: "uint256",
              },
            ],
            internalType: "struct InputToken",
            name: "input",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "bool",
                name: "isFeeOutput",
                type: "bool",
              },
            ],
            internalType: "struct OutputToken[]",
            name: "outputs",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
          {
            internalType: "bytes32",
            name: "hash",
            type: "bytes32",
          },
        ],
        internalType: "struct ResolvedOrder[]",
        name: "resolvedOrders",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "reactorCallback",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e9e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632213f3a91461004657806341d88d691461005b5780637671d07b14610084575b600080fd5b6100596100543660046106c1565b6100c5565b005b61006e610069366004610861565b61012d565b60405161007b91906109ab565b60405180910390f35b6100a0610092366004610ad5565b604081810151909101015190565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161007b565b73ffffffffffffffffffffffffffffffffffffffff821630146100e757600080fd5b6000836000815181106100fc576100fc610b12565b602002602001015160405160200161011491906109ab565b6040516020818303038152906040529050805181602001fd5b6040805161016081018252600060a0820181815260c0830182905260e0830182905261010083018290526101208301829052606061014084018190529083528351808201855282815260208082018490528186018490528401529282018390528282019290925260808101919091526040838101518401810151815180830183528581526020808201869052835190810184526000815292517f05afc97700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216926305afc9779261021792913091600401610b41565b600060405180830381600087803b15801561023157600080fd5b505af1925050508015610242575060015b610283573d808015610270576040519150601f19603f3d011682016040523d82523d6000602084013e610275565b606091505b5061027f81610289565b9150505b92915050565b6040805161016081018252600060a0820181815260c080840183905260e08401839052610100840183905261012084018390526060610140850181905291845284518083018652838152602080820185905281870185905285015293830181905280830152608082015282519091111561030557815182602001fd5b818060200190518101906102839190610d96565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156103705761037061031e565b60405290565b6040516060810167ffffffffffffffff811182821017156103705761037061031e565b6040516080810167ffffffffffffffff811182821017156103705761037061031e565b60405160a0810167ffffffffffffffff811182821017156103705761037061031e565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156104265761042661031e565b604052919050565b600067ffffffffffffffff8211156104485761044861031e565b5060051b60200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461047457600080fd5b50565b803561031981610452565b600067ffffffffffffffff82111561049c5761049c61031e565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126104d957600080fd5b81356104ec6104e782610482565b6103df565b81815284602083860101111561050157600080fd5b816020850160208301376000918101602001919091529392505050565b600060c0828403121561053057600080fd5b61053861034d565b9050813561054581610452565b8152602082013561055581610452565b806020830152506040820135604082015260608201356060820152608082013561057e81610452565b608082015260a082013567ffffffffffffffff81111561059d57600080fd5b6105a9848285016104c8565b60a08301525092915050565b6000606082840312156105c757600080fd5b6105cf610376565b905081356105dc81610452565b80825250602082013560208201526040820135604082015292915050565b801515811461047457600080fd5b600082601f83011261061957600080fd5b813560206106296104e78361042e565b82815260079290921b8401810191818101908684111561064857600080fd5b8286015b848110156106b657608081890312156106655760008081fd5b61066d610399565b813561067881610452565b8152818501358582015260408083013561069181610452565b908201526060828101356106a4816105fa565b9082015283529183019160800161064c565b509695505050505050565b6000806000606084860312156106d657600080fd5b833567ffffffffffffffff808211156106ee57600080fd5b818601915086601f83011261070257600080fd5b813560206107126104e78361042e565b82815260059290921b8401810191818101908a84111561073157600080fd5b8286015b848110156108225780358681111561074c57600080fd5b870160e0818e037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561078057600080fd5b6107886103bc565b858201358881111561079957600080fd5b6107a78f888386010161051e565b8252506107b78e604084016105b5565b8682015260a0820135888111156107ce5760008081fd5b6107dc8f8883860101610608565b60408301525060c0820135888111156107f55760008081fd5b6108038f88838601016104c8565b60608301525060e0919091013560808201528352918301918301610735565b5097506108329050888201610477565b95505050604086013591508082111561084a57600080fd5b50610857868287016104c8565b9150509250925092565b6000806040838503121561087457600080fd5b823567ffffffffffffffff8082111561088c57600080fd5b610898868387016104c8565b935060208501359150808211156108ae57600080fd5b506108bb858286016104c8565b9150509250929050565b60005b838110156108e05781810151838201526020016108c8565b50506000910152565b600081518084526109018160208601602086016108c5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600081518084526020808501945080840160005b838110156109a0578151805173ffffffffffffffffffffffffffffffffffffffff908116895284820151858a01526040808301519091169089015260609081015115159088015260809096019590820190600101610947565b509495945050505050565b602081526000825160e0602084015273ffffffffffffffffffffffffffffffffffffffff808251166101008501528060208301511661012085015260408201516101408501526060820151610160850152806080830151166101808501525060a0810151905060c06101a0840152610a276101c08401826108e9565b90506020840151610a656040850182805173ffffffffffffffffffffffffffffffffffffffff16825260208082015190830152604090810151910152565b5060408401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808584030160a0860152610aa08383610933565b925060608601519150808584030160c086015250610abe82826108e9565b915050608084015160e08401528091505092915050565b600060208284031215610ae757600080fd5b813567ffffffffffffffff811115610afe57600080fd5b610b0a848285016104c8565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b606081526000845160406060840152610b5d60a08401826108e9565b905060208601517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0848303016080850152610b9882826108e9565b91505073ffffffffffffffffffffffffffffffffffffffff851660208401528281036040840152610bc981856108e9565b9695505050505050565b600082601f830112610be457600080fd5b8151610bf26104e782610482565b818152846020838601011115610c0757600080fd5b610b0a8260208301602087016108c5565b600060c08284031215610c2a57600080fd5b610c3261034d565b90508151610c3f81610452565b81526020820151610c4f81610452565b8060208301525060408201516040820152606082015160608201526080820151610c7881610452565b608082015260a082015167ffffffffffffffff811115610c9757600080fd5b6105a984828501610bd3565b600060608284031215610cb557600080fd5b610cbd610376565b90508151610cca81610452565b80825250602082015160208201526040820151604082015292915050565b600082601f830112610cf957600080fd5b81516020610d096104e78361042e565b82815260079290921b84018101918181019086841115610d2857600080fd5b8286015b848110156106b65760808189031215610d455760008081fd5b610d4d610399565b8151610d5881610452565b81528185015185820152604080830151610d7181610452565b90820152606082810151610d84816105fa565b90820152835291830191608001610d2c565b600060208284031215610da857600080fd5b815167ffffffffffffffff80821115610dc057600080fd5b9083019060e08286031215610dd457600080fd5b610ddc6103bc565b825182811115610deb57600080fd5b610df787828601610c18565b825250610e078660208501610ca3565b6020820152608083015182811115610e1e57600080fd5b610e2a87828601610ce8565b60408301525060a083015182811115610e4257600080fd5b610e4e87828601610bd3565b60608301525060c09290920151608083015250939250505056fea26469706673582212202c91d2a01ecff032510bb0d50a7a754d9ed132430d2f912fcb8362cbc62e92e864736f6c63430008110033";

type OrderQuoterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OrderQuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OrderQuoter__factory extends ContractFactory {
  constructor(...args: OrderQuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OrderQuoter> {
    return super.deploy(overrides || {}) as Promise<OrderQuoter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OrderQuoter {
    return super.attach(address) as OrderQuoter;
  }
  override connect(signer: Signer): OrderQuoter__factory {
    return super.connect(signer) as OrderQuoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OrderQuoterInterface {
    return new utils.Interface(_abi) as OrderQuoterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OrderQuoter {
    return new Contract(address, _abi, signerOrProvider) as OrderQuoter;
  }
}
